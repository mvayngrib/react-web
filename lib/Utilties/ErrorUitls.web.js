










(function(global){
var ErrorUtils={
_inGuard:0,
_globalHandler:null,
setGlobalHandler:function setGlobalHandler(fun){
ErrorUtils._globalHandler=fun;
},
reportError:function reportError(error){
ErrorUtils._globalHandler&&ErrorUtils._globalHandler(error);
},
reportFatalError:function reportFatalError(error){
ErrorUtils._globalHandler&&ErrorUtils._globalHandler(error,true);
},
applyWithGuard:function applyWithGuard(fun,context,args){
try{
ErrorUtils._inGuard++;
return fun.apply(context,args);
}catch(e){
ErrorUtils.reportError(e);
}finally{
ErrorUtils._inGuard--;
}
},
applyWithGuardIfNeeded:function applyWithGuardIfNeeded(fun,context,args){
if(ErrorUtils.inGuard()){
return fun.apply(context,args);
}else{
ErrorUtils.applyWithGuard(fun,context,args);
}
},
inGuard:function inGuard(){
return ErrorUtils._inGuard;
},
guard:function guard(fun,name,context){
if(typeof fun!=='function'){
console.warn('A function must be passed to ErrorUtils.guard, got ',fun);
return null;
}
name=name||fun.name||'<generated guard>';
function guarded(){
return(
ErrorUtils.applyWithGuard(
fun,
context||this,
arguments,
null,
name));


}

return guarded;
}};

global.ErrorUtils=ErrorUtils;





function setupErrorGuard(){
var onError=function onError(e){
global.console.error(
'Error: '+
'\n stack: '+e.stack+
'\n line: '+e.line+
'\n message: '+e.message,
e);

};
global.ErrorUtils.setGlobalHandler(onError);
}

setupErrorGuard();
})(window);

module.exports=ErrorUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVycm9yVWl0bHMud2ViLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsIkVycm9yVXRpbHMiLCJfaW5HdWFyZCIsIl9nbG9iYWxIYW5kbGVyIiwic2V0R2xvYmFsSGFuZGxlciIsImZ1biIsInJlcG9ydEVycm9yIiwiZXJyb3IiLCJyZXBvcnRGYXRhbEVycm9yIiwiYXBwbHlXaXRoR3VhcmQiLCJjb250ZXh0IiwiYXJncyIsImFwcGx5IiwiZSIsImFwcGx5V2l0aEd1YXJkSWZOZWVkZWQiLCJpbkd1YXJkIiwiZ3VhcmQiLCJuYW1lIiwiY29uc29sZSIsIndhcm4iLCJndWFyZGVkIiwiYXJndW1lbnRzIiwic2V0dXBFcnJvckd1YXJkIiwib25FcnJvciIsInN0YWNrIiwibGluZSIsIm1lc3NhZ2UiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVdBLENBQUMsU0FBU0EsTUFBVCxDQUFpQjtBQUNoQixHQUFJQyxZQUFhO0FBQ2ZDLFNBQVUsQ0FESztBQUVmQyxlQUFnQixJQUZEO0FBR2ZDLGlCQUFrQiwwQkFBU0MsR0FBVCxDQUFjO0FBQzlCSixXQUFXRSxjQUFYLENBQTRCRSxHQUE1QjtBQUNELENBTGM7QUFNZkMsWUFBYSxxQkFBU0MsS0FBVCxDQUFnQjtBQUMzQk4sV0FBV0UsY0FBWCxFQUE2QkYsV0FBV0UsY0FBWCxDQUEwQkksS0FBMUIsQ0FBN0I7QUFDRCxDQVJjO0FBU2ZDLGlCQUFrQiwwQkFBU0QsS0FBVCxDQUFnQjtBQUNoQ04sV0FBV0UsY0FBWCxFQUE2QkYsV0FBV0UsY0FBWCxDQUEwQkksS0FBMUIsQ0FBaUMsSUFBakMsQ0FBN0I7QUFDRCxDQVhjO0FBWWZFLGVBQWdCLHdCQUFTSixHQUFULENBQWNLLE9BQWQsQ0FBdUJDLElBQXZCLENBQTZCO0FBQzNDLEdBQUk7QUFDRlYsV0FBV0MsUUFBWDtBQUNBLE1BQU9HLEtBQUlPLEtBQUosQ0FBVUYsT0FBVixDQUFtQkMsSUFBbkIsQ0FBUDtBQUNELENBQUMsTUFBT0UsQ0FBUCxDQUFVO0FBQ1ZaLFdBQVdLLFdBQVgsQ0FBdUJPLENBQXZCO0FBQ0QsQ0FMRCxPQUtVO0FBQ1JaLFdBQVdDLFFBQVg7QUFDRDtBQUNGLENBckJjO0FBc0JmWSx1QkFBd0IsZ0NBQVNULEdBQVQsQ0FBY0ssT0FBZCxDQUF1QkMsSUFBdkIsQ0FBNkI7QUFDbkQsR0FBSVYsV0FBV2MsT0FBWCxFQUFKLENBQTBCO0FBQ3hCLE1BQU9WLEtBQUlPLEtBQUosQ0FBVUYsT0FBVixDQUFtQkMsSUFBbkIsQ0FBUDtBQUNELENBRkQsSUFFTztBQUNMVixXQUFXUSxjQUFYLENBQTBCSixHQUExQixDQUErQkssT0FBL0IsQ0FBd0NDLElBQXhDO0FBQ0Q7QUFDRixDQTVCYztBQTZCZkksUUFBUyxrQkFBVztBQUNsQixNQUFPZCxZQUFXQyxRQUFsQjtBQUNELENBL0JjO0FBZ0NmYyxNQUFPLGVBQVNYLEdBQVQsQ0FBY1ksSUFBZCxDQUFvQlAsT0FBcEIsQ0FBNkI7QUFDbEMsR0FBSSxNQUFPTCxJQUFQLEdBQWUsVUFBbkIsQ0FBK0I7QUFDN0JhLFFBQVFDLElBQVIsQ0FBYSxxREFBYixDQUFvRWQsR0FBcEU7QUFDQSxNQUFPLEtBQVA7QUFDRDtBQUNEWSxLQUFPQSxNQUFRWixJQUFJWSxJQUFaLEVBQW9CLG1CQUEzQjtBQUNBLFFBQVNHLFFBQVQsRUFBbUI7QUFDakI7QUFDRW5CLFdBQVdRLGNBQVg7QUFDRUosR0FERjtBQUVFSyxTQUFXLElBRmI7QUFHRVcsU0FIRjtBQUlFLElBSkY7QUFLRUosSUFMRixDQURGOzs7QUFTRDs7QUFFRCxNQUFPRyxRQUFQO0FBQ0QsQ0FuRGMsQ0FBakI7O0FBcURBcEIsT0FBT0MsVUFBUCxDQUFvQkEsVUFBcEI7Ozs7OztBQU1BLFFBQVNxQixnQkFBVCxFQUEyQjtBQUN6QixHQUFJQyxTQUFVLFFBQVZBLFFBQVUsQ0FBU1YsQ0FBVCxDQUFZO0FBQ3hCYixPQUFPa0IsT0FBUCxDQUFlWCxLQUFmO0FBQ0U7QUFDQSxZQURBLENBQ2VNLEVBQUVXLEtBRGpCO0FBRUEsV0FGQSxDQUVjWCxFQUFFWSxJQUZoQjtBQUdBLGNBSEEsQ0FHaUJaLEVBQUVhLE9BSnJCO0FBS0ViLENBTEY7O0FBT0QsQ0FSRDtBQVNBYixPQUFPQyxVQUFQLENBQWtCRyxnQkFBbEIsQ0FBbUNtQixPQUFuQztBQUNEOztBQUVERDtBQUNELENBMUVELEVBMEVHSyxNQTFFSDs7QUE0RUFDLE9BQU9DLE9BQVAsQ0FBaUI1QixVQUFqQiIsImZpbGUiOiJFcnJvclVpdGxzLndlYi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXJyb3JVdGlsc1xuICovXG5cbi8qIGVzbGludCBnbG9iYWwtc3RyaWN0OjAgKi9cbihmdW5jdGlvbihnbG9iYWwpIHtcbiAgdmFyIEVycm9yVXRpbHMgPSB7XG4gICAgX2luR3VhcmQ6IDAsXG4gICAgX2dsb2JhbEhhbmRsZXI6IG51bGwsXG4gICAgc2V0R2xvYmFsSGFuZGxlcjogZnVuY3Rpb24oZnVuKSB7XG4gICAgICBFcnJvclV0aWxzLl9nbG9iYWxIYW5kbGVyID0gZnVuO1xuICAgIH0sXG4gICAgcmVwb3J0RXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBFcnJvclV0aWxzLl9nbG9iYWxIYW5kbGVyICYmIEVycm9yVXRpbHMuX2dsb2JhbEhhbmRsZXIoZXJyb3IpO1xuICAgIH0sXG4gICAgcmVwb3J0RmF0YWxFcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIEVycm9yVXRpbHMuX2dsb2JhbEhhbmRsZXIgJiYgRXJyb3JVdGlscy5fZ2xvYmFsSGFuZGxlcihlcnJvciwgdHJ1ZSk7XG4gICAgfSxcbiAgICBhcHBseVdpdGhHdWFyZDogZnVuY3Rpb24oZnVuLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBFcnJvclV0aWxzLl9pbkd1YXJkKys7XG4gICAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIEVycm9yVXRpbHMucmVwb3J0RXJyb3IoZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBFcnJvclV0aWxzLl9pbkd1YXJkLS07XG4gICAgICB9XG4gICAgfSxcbiAgICBhcHBseVdpdGhHdWFyZElmTmVlZGVkOiBmdW5jdGlvbihmdW4sIGNvbnRleHQsIGFyZ3MpIHtcbiAgICAgIGlmIChFcnJvclV0aWxzLmluR3VhcmQoKSkge1xuICAgICAgICByZXR1cm4gZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRXJyb3JVdGlscy5hcHBseVdpdGhHdWFyZChmdW4sIGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5HdWFyZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gRXJyb3JVdGlscy5faW5HdWFyZDtcbiAgICB9LFxuICAgIGd1YXJkOiBmdW5jdGlvbihmdW4sIG5hbWUsIGNvbnRleHQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQSBmdW5jdGlvbiBtdXN0IGJlIHBhc3NlZCB0byBFcnJvclV0aWxzLmd1YXJkLCBnb3QgJywgZnVuKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBuYW1lID0gbmFtZSB8fCBmdW4ubmFtZSB8fCAnPGdlbmVyYXRlZCBndWFyZD4nO1xuICAgICAgZnVuY3Rpb24gZ3VhcmRlZCgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKFxuICAgICAgICAgICAgZnVuLFxuICAgICAgICAgICAgY29udGV4dCB8fCB0aGlzLFxuICAgICAgICAgICAgYXJndW1lbnRzLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBndWFyZGVkO1xuICAgIH1cbiAgfTtcbiAgZ2xvYmFsLkVycm9yVXRpbHMgPSBFcnJvclV0aWxzO1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBlcnJvciBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gd2UgZW5jb3VudGVyIGFuIGV4Y2VwdGlvblxuICAgKiB3aGVuIGxvYWRpbmcgYSBtb2R1bGUuXG4gICAqL1xuICBmdW5jdGlvbiBzZXR1cEVycm9yR3VhcmQoKSB7XG4gICAgdmFyIG9uRXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgICBnbG9iYWwuY29uc29sZS5lcnJvcihcbiAgICAgICAgJ0Vycm9yOiAnICtcbiAgICAgICAgJ1xcbiBzdGFjazogJyArIGUuc3RhY2sgK1xuICAgICAgICAnXFxuIGxpbmU6ICcgKyBlLmxpbmUgK1xuICAgICAgICAnXFxuIG1lc3NhZ2U6ICcgKyBlLm1lc3NhZ2UsXG4gICAgICAgIGVcbiAgICAgICk7XG4gICAgfTtcbiAgICBnbG9iYWwuRXJyb3JVdGlscy5zZXRHbG9iYWxIYW5kbGVyKG9uRXJyb3IpO1xuICB9XG5cbiAgc2V0dXBFcnJvckd1YXJkKCk7XG59KSh3aW5kb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVycm9yVXRpbHM7XG4iXX0=