







'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};

var _react=require('react');var _react2=_interopRequireDefault(_react);
var _ReactStyleSheet=require('../StyleSheet/StyleSheet.web');var _ReactStyleSheet2=_interopRequireDefault(_ReactStyleSheet);
var _ReactLayoutMixin=require('../Utilties/LayoutMixin');
var _NativeMethodsMixin=require('../Utilties/NativeMethodsMixin.web');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var View=_react2.default.createClass({displayName:'View',
mixins:[_ReactLayoutMixin.Mixin,_NativeMethodsMixin.Mixin],

propTypes:{




testID:_react.PropTypes.string,






onMoveShouldSetResponder:_react.PropTypes.func,
onResponderGrant:_react.PropTypes.func,
onResponderMove:_react.PropTypes.func,
onResponderReject:_react.PropTypes.func,
onResponderRelease:_react.PropTypes.func,
onResponderTerminate:_react.PropTypes.func,
onResponderTerminationRequest:_react.PropTypes.func,
onStartShouldSetResponder:_react.PropTypes.func,
onStartShouldSetResponderCapture:_react.PropTypes.func,










onLayout:_react.PropTypes.func,































pointerEvents:_react.PropTypes.oneOf([
'box-none',
'none',
'box-only',
'auto']),


style:_react.PropTypes.oneOfType([
_react.PropTypes.object,
_react.PropTypes.array])},



render:function render(){
return(
_react2.default.createElement('div',_extends({className:_ReactStyleSheet2.default.viewClassName},this.props),
this.props.children));


}});


View.isReactNativeComponent=true;exports.default=

View;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXcud2ViLmpzIl0sIm5hbWVzIjpbIlZpZXciLCJjcmVhdGVDbGFzcyIsIm1peGlucyIsInByb3BUeXBlcyIsInRlc3RJRCIsInN0cmluZyIsIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlciIsImZ1bmMiLCJvblJlc3BvbmRlckdyYW50Iiwib25SZXNwb25kZXJNb3ZlIiwib25SZXNwb25kZXJSZWplY3QiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwib25MYXlvdXQiLCJwb2ludGVyRXZlbnRzIiwib25lT2YiLCJzdHlsZSIsIm9uZU9mVHlwZSIsIm9iamVjdCIsImFycmF5IiwicmVuZGVyIiwidmlld0NsYXNzTmFtZSIsInByb3BzIiwiY2hpbGRyZW4iLCJpc1JlYWN0TmF0aXZlQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVFBLGE7O0FBRUEsNEI7QUFDQSw2RDtBQUNBO0FBQ0Esc0U7O0FBRUEsR0FBSUEsTUFBTyxnQkFBTUMsV0FBTixDQUFrQjtBQUMzQkMsT0FBUSxtREFEbUI7O0FBRzNCQyxVQUFXOzs7OztBQUtUQyxPQUFRLGlCQUFVQyxNQUxUOzs7Ozs7O0FBWVRDLHlCQUEwQixpQkFBVUMsSUFaM0I7QUFhVEMsaUJBQWtCLGlCQUFVRCxJQWJuQjtBQWNURSxnQkFBaUIsaUJBQVVGLElBZGxCO0FBZVRHLGtCQUFtQixpQkFBVUgsSUFmcEI7QUFnQlRJLG1CQUFvQixpQkFBVUosSUFoQnJCO0FBaUJUSyxxQkFBc0IsaUJBQVVMLElBakJ2QjtBQWtCVE0sOEJBQStCLGlCQUFVTixJQWxCaEM7QUFtQlRPLDBCQUEyQixpQkFBVVAsSUFuQjVCO0FBb0JUUSxpQ0FBa0MsaUJBQVVSLElBcEJuQzs7Ozs7Ozs7Ozs7QUErQlRTLFNBQVUsaUJBQVVULElBL0JYOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStEVFUsY0FBZSxpQkFBVUMsS0FBVixDQUFnQjtBQUM3QixVQUQ2QjtBQUU3QixNQUY2QjtBQUc3QixVQUg2QjtBQUk3QixNQUo2QixDQUFoQixDQS9ETjs7O0FBc0VUQyxNQUFPLGlCQUFVQyxTQUFWLENBQW9CO0FBQ3pCLGlCQUFVQyxNQURlO0FBRXpCLGlCQUFVQyxLQUZlLENBQXBCLENBdEVFLENBSGdCOzs7O0FBK0UzQkMsT0FBUSxpQkFBVztBQUNqQjtBQUNFLDhDQUFLLFVBQVcsMEJBQVdDLGFBQTNCLEVBQThDLEtBQUtDLEtBQW5EO0FBQ0csS0FBS0EsS0FBTCxDQUFXQyxRQURkLENBREY7OztBQUtELENBckYwQixDQUFsQixDQUFYOzs7QUF3RkExQixLQUFLMkIsc0JBQUwsQ0FBOEIsSUFBOUIsQzs7QUFFZTNCLEkiLCJmaWxlIjoiVmlldy53ZWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RWaWV3XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJ1JlYWN0U3R5bGVTaGVldCc7XG5pbXBvcnQgeyBNaXhpbiBhcyBMYXlvdXRNaXhpbiB9IGZyb20gJ1JlYWN0TGF5b3V0TWl4aW4nO1xuaW1wb3J0IHsgTWl4aW4gYXMgTmF0aXZlTWV0aG9kc01peGluIH0gZnJvbSAnTmF0aXZlTWV0aG9kc01peGluJztcblxudmFyIFZpZXcgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIG1peGluczogW0xheW91dE1peGluLCBOYXRpdmVNZXRob2RzTWl4aW5dLFxuXG4gIHByb3BUeXBlczoge1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gbG9jYXRlIHRoaXMgdmlldyBpbiBlbmQtdG8tZW5kIHRlc3RzLiBOQjogZGlzYWJsZXMgdGhlICdsYXlvdXQtb25seVxuICAgICAqIHZpZXcgcmVtb3ZhbCcgb3B0aW1pemF0aW9uIGZvciB0aGlzIHZpZXchXG4gICAgICovXG4gICAgdGVzdElEOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogRm9yIG1vc3QgdG91Y2ggaW50ZXJhY3Rpb25zLCB5b3UnbGwgc2ltcGx5IHdhbnQgdG8gd3JhcCB5b3VyIGNvbXBvbmVudCBpblxuICAgICAqIGBUb3VjaGFibGVIaWdobGlnaHRgIG9yIGBUb3VjaGFibGVPcGFjaXR5YC4gQ2hlY2sgb3V0IGBUb3VjaGFibGUuanNgLFxuICAgICAqIGBTY3JvbGxSZXNwb25kZXIuanNgIGFuZCBgUmVzcG9uZGVyRXZlbnRQbHVnaW4uanNgIGZvciBtb3JlIGRpc2N1c3Npb24uXG4gICAgICovXG4gICAgb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblJlc3BvbmRlckdyYW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblJlc3BvbmRlck1vdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uUmVzcG9uZGVyUmVqZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblJlc3BvbmRlclJlbGVhc2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uUmVzcG9uZGVyVGVybWluYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCBvbiBtb3VudCBhbmQgbGF5b3V0IGNoYW5nZXMgd2l0aFxuICAgICAqXG4gICAgICogICB7bmF0aXZlRXZlbnQ6IHsgbGF5b3V0OiB7eCwgeSwgd2lkdGgsIGhlaWdodH19fS5cbiAgICAgKlxuICAgICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgaW1tZWRpYXRlbHkgb25jZSB0aGUgbGF5b3V0IGhhcyBiZWVuIGNhbGN1bGF0ZWQsIGJ1dFxuICAgICAqIHRoZSBuZXcgbGF5b3V0IG1heSBub3QgeWV0IGJlIHJlZmxlY3RlZCBvbiB0aGUgc2NyZWVuIGF0IHRoZSB0aW1lIHRoZVxuICAgICAqIGV2ZW50IGlzIHJlY2VpdmVkLCBlc3BlY2lhbGx5IGlmIGEgbGF5b3V0IGFuaW1hdGlvbiBpcyBpbiBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBvbkxheW91dDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBJbiB0aGUgYWJzZW5jZSBvZiBgYXV0b2AgcHJvcGVydHksIGBub25lYCBpcyBtdWNoIGxpa2UgYENTU2AncyBgbm9uZWBcbiAgICAgKiB2YWx1ZS4gYGJveC1ub25lYCBpcyBhcyBpZiB5b3UgaGFkIGFwcGxpZWQgdGhlIGBDU1NgIGNsYXNzOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogLmJveC1ub25lIHtcbiAgICAgKiAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAqIH1cbiAgICAgKiAuYm94LW5vbmUgKiB7XG4gICAgICogICBwb2ludGVyLWV2ZW50czogYWxsO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBib3gtb25seWAgaXMgdGhlIGVxdWl2YWxlbnQgb2ZcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIC5ib3gtb25seSB7XG4gICAgICogICBwb2ludGVyLWV2ZW50czogYWxsO1xuICAgICAqIH1cbiAgICAgKiAuYm94LW9ubHkgKiB7XG4gICAgICogICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBCdXQgc2luY2UgYHBvaW50ZXJFdmVudHNgIGRvZXMgbm90IGFmZmVjdCBsYXlvdXQvYXBwZWFyYW5jZSwgYW5kIHdlIGFyZVxuICAgICAqIGFscmVhZHkgZGV2aWF0aW5nIGZyb20gdGhlIHNwZWMgYnkgYWRkaW5nIGFkZGl0aW9uYWwgbW9kZXMsIHdlIG9wdCB0byBub3RcbiAgICAgKiBpbmNsdWRlIGBwb2ludGVyRXZlbnRzYCBvbiBgc3R5bGVgLiBPbiBzb21lIHBsYXRmb3Jtcywgd2Ugd291bGQgbmVlZCB0b1xuICAgICAqIGltcGxlbWVudCBpdCBhcyBhIGBjbGFzc05hbWVgIGFueXdheXMuIFVzaW5nIGBzdHlsZWAgb3Igbm90IGlzIGFuXG4gICAgICogaW1wbGVtZW50YXRpb24gZGV0YWlsIG9mIHRoZSBwbGF0Zm9ybS5cbiAgICAgKi9cbiAgICBwb2ludGVyRXZlbnRzOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgJ2JveC1ub25lJyxcbiAgICAgICdub25lJyxcbiAgICAgICdib3gtb25seScsXG4gICAgICAnYXV0bycsXG4gICAgXSksXG5cbiAgICBzdHlsZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgUHJvcFR5cGVzLmFycmF5XG4gICAgXSksXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e1N0eWxlU2hlZXQudmlld0NsYXNzTmFtZX0gey4uLnRoaXMucHJvcHN9PlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0pO1xuXG5WaWV3LmlzUmVhY3ROYXRpdmVDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgZGVmYXVsdCBWaWV3O1xuIl19