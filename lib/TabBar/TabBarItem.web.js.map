{"version":3,"sources":["TabBarItem.web.js"],"names":["TabBarItem","props","onPress","handleTouchTap","index","tabStyle","styles","tab","style","color","selectedColor","selected","_onClick","link","badge","selectedIcon","icon","marginTop","title","propTypes","oneOfType","string","number","object","func","bool","create","display","textAlign","position","padding","top","left","backgroundColor","height","lineHeight","minWidth","fontSize","borderRadius","fontStyle","width"],"mappings":"AAKA,a,y2BAEA,4B,2CACA,qC,mDACA,gD,o4BAEMA,W,ySA0CO,CACT,GAAI,KAAKC,KAAL,CAAWC,OAAf,CAAwB,CACtB,KAAKD,KAAL,CAAWC,OAAX,GACD,CACD,GAAI,KAAKD,KAAL,CAAWE,cAAf,CAA+B,CAC7B,KAAKF,KAAL,CAAWE,cAAX,CAA0B,KAAKF,KAAL,CAAWG,KAArC,EACD,CACF,C,uCAEQ,CAEP,GAAIC,sBAAeC,OAAOC,GAAtB,CAA8B,KAAKN,KAAL,CAAWO,KAAX,EAAoB,EAAlD,EAAsDC,MAAO,KAAKR,KAAL,CAAWS,aAAX,EAA4B,KAAKT,KAAL,CAAWU,QAAvC,CAAkD,KAAKV,KAAL,CAAWS,aAA7D,CAA6E,IAA1I,EAAJ,CAEA,MACE,qCAAI,MAAOL,QAAX,iDACE,mCAAG,QAAS,KAAKO,QAAjB,CAA2B,MAAON,OAAOO,IAAzC,iDACG,KAAKZ,KAAL,CAAWa,KAAX,CAAmB,oCAAI,MAAOR,OAAOQ,KAAlB,iDAA0B,KAAKb,KAAL,CAAWa,KAArC,CAAnB,CAAsE,EADzE,CAEE,qDAAO,OAAQ,KAAKb,KAAL,CAAWU,QAAX,EAAuB,KAAKV,KAAL,CAAWc,YAAlC,CAAiD,KAAKd,KAAL,CAAWc,YAA5D,CAA2E,KAAKd,KAAL,CAAWe,IAArG,CAA2G,MAAOV,OAAOU,IAAzH,iDAFF,CAGE,oDAAM,MAAO,CAACC,UAAW,CAAZ,CAAb,iDACE,oDAAM,MAAOX,OAAOY,KAApB,iDAA4B,KAAKjB,KAAL,CAAWiB,KAAvC,CADF,CAHF,CADF,CADF,CAWD,C,0CAlEGlB,U,CACGmB,S,CAAY,CAIjBL,MAAO,oBAAUM,SAAV,CAAoB,CACzB,oBAAUC,MADe,CACP,oBAAUC,MADH,CAApB,CAJU,CAUjBN,KAAM,oBAAUO,MAVC,CAejBR,aAAc,oBAAUM,MAfP,CAoBjBnB,QAAS,oBAAUsB,IApBF,CAyBjBb,SAAU,oBAAUc,IAzBH,CA6BjBjB,MAAO,oBAAUe,MA7BA,CAkCjBL,MAAO,oBAAUG,MAlCA,CAsCjBX,cAAe,oBAAUW,MAtCR,C,CAoErB,GAAIf,QAAS,2BAAWoB,MAAX,CAAkB,CAC7BnB,IAAK,CACHoB,QAAS,YADN,CAEHC,UAAW,QAFR,CAGHC,SAAU,UAHP,CADwB,CAM7BhB,KAAM,CACJc,QAAS,OADL,CAEJG,QAAS,SAFL,CANuB,CAU7BhB,MAAO,CACLa,QAAS,cADJ,CAELE,SAAU,UAFL,CAGLE,IAAK,CAHA,CAILC,KAAM,KAJD,CAKLvB,MAAO,MALF,CAMLwB,gBAAiB,SANZ,CAOLC,OAAQ,OAPH,CAQLC,WAAY,OARP,CASLC,SAAU,OATL,CAULC,SAAU,OAVL,CAWLC,aAAc,OAXT,CAYLC,UAAW,QAZN,CAVsB,CAwB7BvB,KAAM,CACJwB,MAAO,SADH,CAEJN,OAAQ,SAFJ,CAxBuB,CA4B7BhB,MAAO,CACLmB,SAAU,EADL,CA5BsB,CAAlB,CAAb,C,gBAiCerC,U","file":"TabBarItem.web.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Alibaba Group Holding Limited.\n * All rights reserved.\n *\n */\n'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {View, Text, Image, StyleSheet} from 'react-native-web';\n\nclass TabBarItem extends Component {\n  static propTypes = {\n    /**\n     * Little red bubble that sits at the top right of the icon.\n     */\n    badge: PropTypes.oneOfType([\n      PropTypes.string, PropTypes.number,\n    ]),\n    /**\n     * A custom icon for the tab. It is ignored when a system icon is defined.\n     */\n    icon: PropTypes.object,\n    /**\n     * A custom icon when the tab is selected. It is ignored when a system\n     * icon is defined. If left empty, the icon will be tinted in blue.\n     */\n    selectedIcon: PropTypes.string,\n    /**\n     * Callback when this tab is being selected, you should change the state of your\n     * component to set selected={true}.\n     */\n    onPress: PropTypes.func,\n    /**\n     * It specifies whether the children are visible or not. If you see a\n     * blank content, you probably forgot to add a selected one.\n     */\n    selected: PropTypes.bool,\n    /**\n     * React style object.\n     */\n    style: PropTypes.object,\n    /**\n     * Text that appears under the icon. It is ignored when a system icon\n     * is defined.\n     */\n    title: PropTypes.string,\n    /**\n     * Color of the currently selected tab icon\n     */\n    selectedColor: PropTypes.string\n  }\n\n  _onClick() {\n    if (this.props.onPress) {\n      this.props.onPress();\n    }\n    if (this.props.handleTouchTap) {\n      this.props.handleTouchTap(this.props.index);\n    }\n  }\n\n  render() {\n\n    var tabStyle = {...styles.tab, ...this.props.style || {}, color: this.props.selectedColor && this.props.selected ? this.props.selectedColor : null};\n\n    return (\n      <li style={tabStyle}>\n        <a onClick={this._onClick} style={styles.link}>\n          {this.props.badge ? <em style={styles.badge}>{this.props.badge}</em> : ''}\n          <Image source={this.props.selected && this.props.selectedIcon ? this.props.selectedIcon : this.props.icon} style={styles.icon} />\n          <View style={{marginTop: 4}}>\n            <Text style={styles.title}>{this.props.title}</Text>\n          </View>\n        </a>\n      </li>\n    );\n  }\n}\n\nlet styles = StyleSheet.create({\n  tab: {\n    display: 'table-cell',\n    textAlign: 'center',\n    position: 'relative'\n  },\n  link: {\n    display: 'block',\n    padding: '0.3em 0'\n  },\n  badge: {\n    display: 'inline-block',\n    position: 'absolute',\n    top: 0,\n    left: '52%',\n    color: '#FFF',\n    backgroundColor: '#FF0000',\n    height: '1.6em',\n    lineHeight: '1.6em',\n    minWidth: '1.6em',\n    fontSize: '0.7em',\n    borderRadius: '0.8em',\n    fontStyle: 'normal'\n  },\n  icon: {\n    width: '1.875em',\n    height: '1.875em'\n  },\n  title: {\n    fontSize: 12\n  }\n});\n\nexport default TabBarItem;\n"]}