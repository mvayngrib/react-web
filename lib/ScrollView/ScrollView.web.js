







'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();

var _react=require('react');var _react2=_interopRequireDefault(_react);
var _reactDom=require('react-dom');var _reactDom2=_interopRequireDefault(_reactDom);
var _ReactScrollResponder=require('../ListView/ScrollResponder.web');var _ReactScrollResponder2=_interopRequireDefault(_ReactScrollResponder);
var _ReactStyleSheet=require('../StyleSheet/StyleSheet.web');var _ReactStyleSheet2=_interopRequireDefault(_ReactStyleSheet);
var _ReactView=require('../View/View.web');var _ReactView2=_interopRequireDefault(_ReactView);
var _throttleit=require('throttleit');var _throttleit2=_interopRequireDefault(_throttleit);
var _reactMixin=require('react-mixin');var _reactMixin2=_interopRequireDefault(_reactMixin);
var _autobindDecorator=require('autobind-decorator');var _autobindDecorator2=_interopRequireDefault(_autobindDecorator);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var SCROLLVIEW='ScrollView';
var INNERVIEW='InnerScrollView';
var CONTENT_EXT_STYLE=['padding','paddingTop','paddingBottom','paddingLeft','paddingRight'];var
















ScrollView=function(_Component){_inherits(ScrollView,_Component);function ScrollView(){var _ref;var _temp,_this,_ret;_classCallCheck(this,ScrollView);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=ScrollView.__proto__||Object.getPrototypeOf(ScrollView)).call.apply(_ref,[this].concat(args))),_this),_this.

state=_this.scrollResponderMixinGetInitialState(),_temp),_possibleConstructorReturn(_this,_ret);}_createClass(ScrollView,[{key:'getScrollResponder',value:function getScrollResponder()







{
return this;
}},{key:'getInnerViewNode',value:function getInnerViewNode()

{
return this.refs[INNERVIEW];
}},{key:'scrollTo',value:function scrollTo(

opts){


if(typeof opts==='number'){
opts={y:opts,x:arguments[1]};
}

this.scrollWithoutAnimationTo(opts.y,opts.x);
}},{key:'scrollWithoutAnimationTo',value:function scrollWithoutAnimationTo(

destY,destX){






var scrollView=_reactDom2.default.findDOMNode(this.refs[SCROLLVIEW]);
scrollView.scrollTop=destY||0;
scrollView.scrollLeft=destX||0;
}},{key:'handleScroll',value:function handleScroll(

e){

















this.props.onScroll&&this.props.onScroll(e);
}},{key:'render',value:function render()

{var _props=



this.props;var style=_props.style;var otherProps=_objectWithoutProperties(_props,['style']);

var contentContainerExtStyle={};

if(style){
for(var i=0;i<CONTENT_EXT_STYLE.length;i++){
if(typeof style[CONTENT_EXT_STYLE[i]]==='number'){
contentContainerExtStyle[CONTENT_EXT_STYLE[i]]=style[CONTENT_EXT_STYLE[i]];
}
}
}

var contentContainerStyle=[
styles.contentContainer,
this.props.horizontal&&styles.contentContainerHorizontal,
this.props.contentContainerStyle,
contentContainerExtStyle];












var contentContainer=
_react2.default.createElement(_ReactView2.default,{
ref:INNERVIEW,
style:contentContainerStyle,
removeClippedSubviews:this.props.removeClippedSubviews,
collapsable:false},
this.props.children);


var alwaysBounceHorizontal=
this.props.alwaysBounceHorizontal!==undefined?
this.props.alwaysBounceHorizontal:
this.props.horizontal;

var alwaysBounceVertical=
this.props.alwaysBounceVertical!==undefined?
this.props.alwaysBounceVertical:
!this.props.horizontal;

var handleScroll=function handleScroll(){};
if(this.props.scrollEventThrottle&&this.props.onScroll){
handleScroll=(0,_throttleit2.default)(this.handleScroll,this.props.scrollEventThrottle);
}

var orientationStyle=this.props.horizontal?styles.horizontal:styles.vertical;

var props=_extends({},
otherProps,{
alwaysBounceHorizontal:alwaysBounceHorizontal,
alwaysBounceVertical:alwaysBounceVertical,
style:[styles.base,orientationStyle,this.props.style],
onTouchStart:this.scrollResponderHandleTouchStart,
onTouchMove:this.scrollResponderHandleTouchMove,
onTouchEnd:this.scrollResponderHandleTouchEnd,
onScrollBeginDrag:this.scrollResponderHandleScrollBeginDrag,
onScrollEndDrag:this.scrollResponderHandleScrollEndDrag,
onMomentumScrollBegin:this.scrollResponderHandleMomentumScrollBegin,
onMomentumScrollEnd:this.scrollResponderHandleMomentumScrollEnd,
onStartShouldSetResponder:this.scrollResponderHandleStartShouldSetResponder,
onStartShouldSetResponderCapture:this.scrollResponderHandleStartShouldSetResponderCapture,


onScrollShouldSetResponder:handleScroll,

onScroll:function onScroll(){},
onResponderGrant:this.scrollResponderHandleResponderGrant,
onResponderTerminationRequest:this.scrollResponderHandleTerminationRequest,
onResponderTerminate:this.scrollResponderHandleTerminate,
onResponderRelease:this.scrollResponderHandleResponderRelease,
onResponderReject:this.scrollResponderHandleResponderReject});


return(
_react2.default.createElement(_ReactView2.default,_extends({},props,{ref:SCROLLVIEW}),
contentContainer));


}}]);return ScrollView;}(_react.Component);
;

var styles=_ReactStyleSheet2.default.create({
base:{
WebkitOverflowScrolling:'touch',
flex:1},

horizontal:{
overflowX:'scroll',
overflowY:'hidden'},

vertical:{
overflowX:'hidden',
overflowY:'scroll'},

contentContainer:{
position:'absolute',
minWidth:'100%'},

contentContainerHorizontal:{
alignSelf:'flex-start',
flexDirection:'row'}});



_reactMixin2.default.onClass(ScrollView,_ReactScrollResponder2.default.Mixin);
(0,_autobindDecorator2.default)(ScrollView);

ScrollView.isReactNativeComponent=true;exports.default=

ScrollView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXcud2ViLmpzIl0sIm5hbWVzIjpbIlNDUk9MTFZJRVciLCJJTk5FUlZJRVciLCJDT05URU5UX0VYVF9TVFlMRSIsIlNjcm9sbFZpZXciLCJzdGF0ZSIsInNjcm9sbFJlc3BvbmRlck1peGluR2V0SW5pdGlhbFN0YXRlIiwicmVmcyIsIm9wdHMiLCJ5IiwieCIsImFyZ3VtZW50cyIsInNjcm9sbFdpdGhvdXRBbmltYXRpb25UbyIsImRlc3RZIiwiZGVzdFgiLCJzY3JvbGxWaWV3IiwiZmluZERPTU5vZGUiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZSIsInByb3BzIiwib25TY3JvbGwiLCJzdHlsZSIsIm90aGVyUHJvcHMiLCJjb250ZW50Q29udGFpbmVyRXh0U3R5bGUiLCJpIiwibGVuZ3RoIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwic3R5bGVzIiwiY29udGVudENvbnRhaW5lciIsImhvcml6b250YWwiLCJjb250ZW50Q29udGFpbmVySG9yaXpvbnRhbCIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsImNoaWxkcmVuIiwiYWx3YXlzQm91bmNlSG9yaXpvbnRhbCIsInVuZGVmaW5lZCIsImFsd2F5c0JvdW5jZVZlcnRpY2FsIiwiaGFuZGxlU2Nyb2xsIiwic2Nyb2xsRXZlbnRUaHJvdHRsZSIsIm9yaWVudGF0aW9uU3R5bGUiLCJ2ZXJ0aWNhbCIsImJhc2UiLCJvblRvdWNoU3RhcnQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0Iiwib25Ub3VjaE1vdmUiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaE1vdmUiLCJvblRvdWNoRW5kIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hFbmQiLCJvblNjcm9sbEJlZ2luRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEJlZ2luRHJhZyIsIm9uU2Nyb2xsRW5kRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEVuZERyYWciLCJvbk1vbWVudHVtU2Nyb2xsQmVnaW4iLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEJlZ2luIiwib25Nb21lbnR1bVNjcm9sbEVuZCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZU1vbWVudHVtU2Nyb2xsRW5kIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsIm9uUmVzcG9uZGVyR3JhbnQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJHcmFudCIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlVGVybWluYXRpb25SZXF1ZXN0Iiwib25SZXNwb25kZXJUZXJtaW5hdGUiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUZXJtaW5hdGUiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwib25SZXNwb25kZXJSZWplY3QiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWplY3QiLCJjcmVhdGUiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsImZsZXgiLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwb3NpdGlvbiIsIm1pbldpZHRoIiwiYWxpZ25TZWxmIiwiZmxleERpcmVjdGlvbiIsIm9uQ2xhc3MiLCJNaXhpbiIsImlzUmVhY3ROYXRpdmVDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBUUEsYTs7QUFFQSw0QjtBQUNBLG1DO0FBQ0EscUU7QUFDQSw2RDtBQUNBLDJDO0FBQ0Esc0M7QUFDQSx1QztBQUNBLHFEOztBQUVBLEdBQU1BLFlBQWEsWUFBbkI7QUFDQSxH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Vzs7QUFpQjdCOUMsMkJBQTRCO0FBQzFCK0MsVUFBVyxZQURlO0FBRTFCQyxjQUFlLEtBRlcsQ0FqQkMsQ0FBbEIsQ0FBYjs7OztBQXVCQSxxQkFBTUMsT0FBTixDQUFjNUUsVUFBZCxDQUEwQiwrQkFBZ0I2RSxLQUExQztBQUNBLGdDQUFTN0UsVUFBVDs7QUFFQUEsV0FBVzhFLHNCQUFYLENBQW9DLElBQXBDLEM7O0FBRWU5RSxVIiwiZmlsZSI6IlNjcm9sbFZpZXcud2ViLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2Nyb2xsVmlld1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMsIENvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgU2Nyb2xsUmVzcG9uZGVyIGZyb20gJ1JlYWN0U2Nyb2xsUmVzcG9uZGVyJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJ1JlYWN0U3R5bGVTaGVldCc7XG5pbXBvcnQgVmlldyBmcm9tICdSZWFjdFZpZXcnO1xuaW1wb3J0IHRocm90dGxlIGZyb20gJ3Rocm90dGxlaXQnO1xuaW1wb3J0IG1peGluIGZyb20gJ3JlYWN0LW1peGluJztcbmltcG9ydCBhdXRvYmluZCBmcm9tICdhdXRvYmluZC1kZWNvcmF0b3InO1xuXG5jb25zdCBTQ1JPTExWSUVXID0gJ1Njcm9sbFZpZXcnO1xuY29uc3QgSU5ORVJWSUVXID0gJ0lubmVyU2Nyb2xsVmlldyc7XG5jb25zdCBDT05URU5UX0VYVF9TVFlMRSA9IFsncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1JpZ2h0J107XG5cbi8qKlxuICogQ29tcG9uZW50IHRoYXQgd3JhcHMgcGxhdGZvcm0gU2Nyb2xsVmlldyB3aGlsZSBwcm92aWRpbmdcbiAqIGludGVncmF0aW9uIHdpdGggdG91Y2ggbG9ja2luZyBcInJlc3BvbmRlclwiIHN5c3RlbS5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBTY3JvbGxWaWV3cyBtdXN0IGhhdmUgYSBib3VuZGVkIGhlaWdodCBpbiBvcmRlciB0byB3b3JrLFxuICogc2luY2UgdGhleSBjb250YWluIHVuYm91bmRlZC1oZWlnaHQgY2hpbGRyZW4gaW50byBhIGJvdW5kZWQgY29udGFpbmVyICh2aWFcbiAqIGEgc2Nyb2xsIGludGVyYWN0aW9uKS4gSW4gb3JkZXIgdG8gYm91bmQgdGhlIGhlaWdodCBvZiBhIFNjcm9sbFZpZXcsIGVpdGhlclxuICogc2V0IHRoZSBoZWlnaHQgb2YgdGhlIHZpZXcgZGlyZWN0bHkgKGRpc2NvdXJhZ2VkKSBvciBtYWtlIHN1cmUgYWxsIHBhcmVudFxuICogdmlld3MgaGF2ZSBib3VuZGVkIGhlaWdodC4gRm9yZ2V0dGluZyB0byB0cmFuc2ZlciBge2ZsZXg6IDF9YCBkb3duIHRoZVxuICogdmlldyBzdGFjayBjYW4gbGVhZCB0byBlcnJvcnMgaGVyZSwgd2hpY2ggdGhlIGVsZW1lbnQgaW5zcGVjdG9yIG1ha2VzXG4gKiBlYXN5IHRvIGRlYnVnLlxuICpcbiAqIERvZXNuJ3QgeWV0IHN1cHBvcnQgb3RoZXIgY29udGFpbmVkIHJlc3BvbmRlcnMgZnJvbSBibG9ja2luZyB0aGlzIHNjcm9sbFxuICogdmlldyBmcm9tIGJlY29taW5nIHRoZSByZXNwb25kZXIuXG4gKi9cbmNsYXNzIFNjcm9sbFZpZXcgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRlID0gdGhpcy5zY3JvbGxSZXNwb25kZXJNaXhpbkdldEluaXRpYWxTdGF0ZSgpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSB1bmRlcmx5aW5nIHNjcm9sbCByZXNwb25kZXIsIHdoaWNoIHN1cHBvcnRzXG4gICAqIG9wZXJhdGlvbnMgbGlrZSBgc2Nyb2xsVG9gLiBBbGwgU2Nyb2xsVmlldy1saWtlIGNvbXBvbmVudHMgc2hvdWxkXG4gICAqIGltcGxlbWVudCB0aGlzIG1ldGhvZCBzbyB0aGF0IHRoZXkgY2FuIGJlIGNvbXBvc2VkIHdoaWxlIHByb3ZpZGluZyBhY2Nlc3NcbiAgICogdG8gdGhlIHVuZGVybHlpbmcgc2Nyb2xsIHJlc3BvbmRlcidzIG1ldGhvZHMuXG4gICAqL1xuICBnZXRTY3JvbGxSZXNwb25kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXRJbm5lclZpZXdOb2RlKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnNbSU5ORVJWSUVXXTtcbiAgfVxuXG4gIHNjcm9sbFRvKG9wdHMpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIC0gRG9uJ3Qga25vdyBob3cgdG8gcGFzcyBNaXhpbiBjb3JyZWN0bHkuIFBvc3Rwb25lIGZvciBub3dcbiAgICAvLyB0aGlzLmdldFNjcm9sbFJlc3BvbmRlcigpLnNjcm9sbFJlc3BvbmRlclNjcm9sbFRvKGRlc3RYIHx8IDAsIGRlc3RZIHx8IDApO1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgIG9wdHMgPSB7IHk6IG9wdHMsIHg6IGFyZ3VtZW50c1sxXSB9O1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsV2l0aG91dEFuaW1hdGlvblRvKG9wdHMueSwgb3B0cy54KTtcbiAgfVxuXG4gIHNjcm9sbFdpdGhvdXRBbmltYXRpb25UbyhkZXN0WT86IG51bWJlciwgZGVzdFg/OiBudW1iZXIpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIC0gRG9uJ3Qga25vdyBob3cgdG8gcGFzcyBNaXhpbiBjb3JyZWN0bHkuIFBvc3Rwb25lIGZvciBub3dcbiAgICAvLyB0aGlzLmdldFNjcm9sbFJlc3BvbmRlcigpLnNjcm9sbFJlc3BvbmRlclNjcm9sbFdpdGhvdXRoQW5pbWF0aW9uVG8oXG4gICAgLy8gICBkZXN0WCB8fCAwLFxuICAgIC8vICAgZGVzdFkgfHwgMCxcbiAgICAvLyApO1xuXG4gICAgbGV0IHNjcm9sbFZpZXcgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLnJlZnNbU0NST0xMVklFV10pO1xuICAgIHNjcm9sbFZpZXcuc2Nyb2xsVG9wID0gZGVzdFkgfHwgMDtcbiAgICBzY3JvbGxWaWV3LnNjcm9sbExlZnQgPSBkZXN0WCB8fCAwO1xuICB9XG5cbiAgaGFuZGxlU2Nyb2xsKGU6IEV2ZW50KSB7XG4gICAgLy8gaWYgKF9fREVWX18pIHtcbiAgICAvLyAgIGlmICh0aGlzLnByb3BzLm9uU2Nyb2xsICYmICF0aGlzLnByb3BzLnNjcm9sbEV2ZW50VGhyb3R0bGUpIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coXG4gICAgLy8gICAgICAgJ1lvdSBzcGVjaWZpZWQgYG9uU2Nyb2xsYCBvbiBhIDxTY3JvbGxWaWV3PiBidXQgbm90ICcgK1xuICAgIC8vICAgICAgICdgc2Nyb2xsRXZlbnRUaHJvdHRsZWAuIFlvdSB3aWxsIG9ubHkgcmVjZWl2ZSBvbmUgZXZlbnQuICcgK1xuICAgIC8vICAgICAgICdVc2luZyBgMTZgIHlvdSBnZXQgYWxsIHRoZSBldmVudHMgYnV0IGJlIGF3YXJlIHRoYXQgaXQgbWF5ICcgK1xuICAgIC8vICAgICAgICdjYXVzZSBmcmFtZSBkcm9wcywgdXNlIGEgYmlnZ2VyIG51bWJlciBpZiB5b3UgZG9uXFwndCBuZWVkIGFzICcgK1xuICAgIC8vICAgICAgICdtdWNoIHByZWNpc2lvbi4nXG4gICAgLy8gICAgICk7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuICAgIC8vIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgLy8gICBpZiAodGhpcy5wcm9wcy5rZXlib2FyZERpc21pc3NNb2RlID09PSAnb24tZHJhZycpIHtcbiAgICAvLyAgICAgZGlzbWlzc0tleWJvYXJkKCk7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuXG4gICAgdGhpcy5wcm9wcy5vblNjcm9sbCAmJiB0aGlzLnByb3BzLm9uU2Nyb2xsKGUpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBzdHlsZSxcbiAgICAgIC4uLm90aGVyUHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCBjb250ZW50Q29udGFpbmVyRXh0U3R5bGUgPSB7fTtcblxuICAgIGlmIChzdHlsZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDT05URU5UX0VYVF9TVFlMRS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodHlwZW9mIHN0eWxlW0NPTlRFTlRfRVhUX1NUWUxFW2ldXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb250ZW50Q29udGFpbmVyRXh0U3R5bGVbQ09OVEVOVF9FWFRfU1RZTEVbaV1dID0gc3R5bGVbQ09OVEVOVF9FWFRfU1RZTEVbaV1dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRDb250YWluZXJTdHlsZSA9IFtcbiAgICAgIHN0eWxlcy5jb250ZW50Q29udGFpbmVyLFxuICAgICAgdGhpcy5wcm9wcy5ob3Jpem9udGFsICYmIHN0eWxlcy5jb250ZW50Q29udGFpbmVySG9yaXpvbnRhbCxcbiAgICAgIHRoaXMucHJvcHMuY29udGVudENvbnRhaW5lclN0eWxlLFxuICAgICAgY29udGVudENvbnRhaW5lckV4dFN0eWxlLFxuICAgIF07XG4gICAgLy8gaWYgKF9fREVWX18gJiYgdGhpcy5wcm9wcy5zdHlsZSkge1xuICAgIC8vICAgbGV0IHN0eWxlID0gZmxhdHRlblN0eWxlKHRoaXMucHJvcHMuc3R5bGUpO1xuICAgIC8vICAgbGV0IGNoaWxkTGF5b3V0UHJvcHMgPSBbJ2FsaWduSXRlbXMnLCAnanVzdGlmeUNvbnRlbnQnXVxuICAgIC8vICAgICAuZmlsdGVyKChwcm9wKSA9PiBzdHlsZSAmJiBzdHlsZVtwcm9wXSAhPT0gdW5kZWZpbmVkKTtcbiAgICAvLyAgIGludmFyaWFudChcbiAgICAvLyAgICAgY2hpbGRMYXlvdXRQcm9wcy5sZW5ndGggPT09IDAsXG4gICAgLy8gICAgICdTY3JvbGxWaWV3IGNoaWxkIGxheW91dCAoJyArIEpTT04uc3RyaW5naWZ5KGNoaWxkTGF5b3V0UHJvcHMpICtcbiAgICAvLyAgICAgICAnKSBtdXN0IGJ5IGFwcGxpZWQgdGhyb3VnaCB0aGUgY29udGVudENvbnRhaW5lclN0eWxlIHByb3AuJ1xuICAgIC8vICAgKTtcbiAgICAvLyB9XG5cbiAgICBsZXQgY29udGVudENvbnRhaW5lciA9XG4gICAgICA8Vmlld1xuICAgICAgICByZWY9e0lOTkVSVklFV31cbiAgICAgICAgc3R5bGU9e2NvbnRlbnRDb250YWluZXJTdHlsZX1cbiAgICAgICAgcmVtb3ZlQ2xpcHBlZFN1YnZpZXdzPXt0aGlzLnByb3BzLnJlbW92ZUNsaXBwZWRTdWJ2aWV3c31cbiAgICAgICAgY29sbGFwc2FibGU9e2ZhbHNlfT5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1ZpZXc+O1xuXG4gICAgbGV0IGFsd2F5c0JvdW5jZUhvcml6b250YWwgPVxuICAgICAgdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VIb3Jpem9udGFsICE9PSB1bmRlZmluZWQgP1xuICAgICAgICB0aGlzLnByb3BzLmFsd2F5c0JvdW5jZUhvcml6b250YWwgOlxuICAgICAgICB0aGlzLnByb3BzLmhvcml6b250YWw7XG5cbiAgICBsZXQgYWx3YXlzQm91bmNlVmVydGljYWwgPVxuICAgICAgdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VWZXJ0aWNhbCAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VWZXJ0aWNhbCA6XG4gICAgICAgICF0aGlzLnByb3BzLmhvcml6b250YWw7XG5cbiAgICBsZXQgaGFuZGxlU2Nyb2xsID0gKCkgPT4ge307XG4gICAgaWYgKHRoaXMucHJvcHMuc2Nyb2xsRXZlbnRUaHJvdHRsZSAmJiB0aGlzLnByb3BzLm9uU2Nyb2xsKSB7XG4gICAgICBoYW5kbGVTY3JvbGwgPSB0aHJvdHRsZSh0aGlzLmhhbmRsZVNjcm9sbCwgdGhpcy5wcm9wcy5zY3JvbGxFdmVudFRocm90dGxlKTtcbiAgICB9XG5cbiAgICBsZXQgb3JpZW50YXRpb25TdHlsZSA9IHRoaXMucHJvcHMuaG9yaXpvbnRhbCA/IHN0eWxlcy5ob3Jpem9udGFsIDogc3R5bGVzLnZlcnRpY2FsXG5cbiAgICBsZXQgcHJvcHMgPSB7XG4gICAgICAuLi5vdGhlclByb3BzLFxuICAgICAgYWx3YXlzQm91bmNlSG9yaXpvbnRhbCxcbiAgICAgIGFsd2F5c0JvdW5jZVZlcnRpY2FsLFxuICAgICAgc3R5bGU6IChbc3R5bGVzLmJhc2UsIG9yaWVudGF0aW9uU3R5bGUsIHRoaXMucHJvcHMuc3R5bGVdOiA/QXJyYXk8YW55PiksXG4gICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hTdGFydCxcbiAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLnNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoTW92ZSxcbiAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hFbmQsXG4gICAgICBvblNjcm9sbEJlZ2luRHJhZzogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxCZWdpbkRyYWcsXG4gICAgICBvblNjcm9sbEVuZERyYWc6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsRW5kRHJhZyxcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxCZWdpbjogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEJlZ2luLFxuICAgICAgb25Nb21lbnR1bVNjcm9sbEVuZDogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEVuZCxcbiAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUsXG4gICAgICAvLyBvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlcjogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgICAvLyBvblNjcm9sbDogaGFuZGxlU2Nyb2xsLFxuICAgICAgb25TY3JvbGxTaG91bGRTZXRSZXNwb25kZXI6IGhhbmRsZVNjcm9sbCxcbiAgICAgIC8vIHJlcGxhY2Ugb25TY3JvbGwgaW4gdGhlIHByb3BzXG4gICAgICBvblNjcm9sbDogKCkgPT4ge30sXG4gICAgICBvblJlc3BvbmRlckdyYW50OiB0aGlzLnNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlckdyYW50LFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVGVybWluYXRpb25SZXF1ZXN0LFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGU6IHRoaXMuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVGVybWluYXRlLFxuICAgICAgb25SZXNwb25kZXJSZWxlYXNlOiB0aGlzLnNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlclJlbGVhc2UsXG4gICAgICBvblJlc3BvbmRlclJlamVjdDogdGhpcy5zY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWplY3QsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyB7Li4ucHJvcHN9IHJlZj17U0NST0xMVklFV30+XG4gICAgICAgIHtjb250ZW50Q29udGFpbmVyfVxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cbn07XG5cbmxldCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJhc2U6IHtcbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICBmbGV4OiAxLFxuICB9LFxuICBob3Jpem9udGFsOiB7XG4gICAgb3ZlcmZsb3dYOiAnc2Nyb2xsJyxcbiAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gIH0sXG4gIHZlcnRpY2FsOiB7XG4gICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICBvdmVyZmxvd1k6ICdzY3JvbGwnXG4gIH0sXG4gIGNvbnRlbnRDb250YWluZXI6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBtaW5XaWR0aDogJzEwMCUnLFxuICB9LFxuICBjb250ZW50Q29udGFpbmVySG9yaXpvbnRhbDoge1xuICAgIGFsaWduU2VsZjogJ2ZsZXgtc3RhcnQnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICB9LFxufSk7XG5cbm1peGluLm9uQ2xhc3MoU2Nyb2xsVmlldywgU2Nyb2xsUmVzcG9uZGVyLk1peGluKTtcbmF1dG9iaW5kKFNjcm9sbFZpZXcpO1xuXG5TY3JvbGxWaWV3LmlzUmVhY3ROYXRpdmVDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxWaWV3O1xuIl19