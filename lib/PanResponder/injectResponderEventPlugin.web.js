




'use strict';

var _EventPluginRegistry=require('react/lib/EventPluginRegistry');var _EventPluginRegistry2=_interopRequireDefault(_EventPluginRegistry);
var _ResponderEventPlugin=require('react/lib/ResponderEventPlugin');var _ResponderEventPlugin2=_interopRequireDefault(_ResponderEventPlugin);
var _EventConstants=require('react/lib/EventConstants');var _EventConstants2=_interopRequireDefault(_EventConstants);
var _ResponderTouchHistoryStore=require('react/lib/ResponderTouchHistoryStore');var _ResponderTouchHistoryStore2=_interopRequireDefault(_ResponderTouchHistoryStore);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var topLevelTypes=_EventConstants2.default.topLevelTypes;

var eventTypes=_ResponderEventPlugin2.default.eventTypes;
eventTypes.startShouldSetResponder.dependencies=[
topLevelTypes.topTouchStart];


eventTypes.scrollShouldSetResponder.dependencies=[
topLevelTypes.topScroll];


eventTypes.selectionChangeShouldSetResponder.dependencies=[
topLevelTypes.topSelectionChange];


eventTypes.moveShouldSetResponder.dependencies=[
topLevelTypes.topTouchMove];


['responderStart','responderMove','responderEnd','responderRelease',
'responderTerminationRequest','responderGrant','responderReject','responderTerminate'].forEach(function(type){
var dependencies=void 0;
if('ontouchstart'in window){
dependencies=[
topLevelTypes.topTouchStart,
topLevelTypes.topTouchCancel,
topLevelTypes.topTouchEnd,
topLevelTypes.topTouchMove];

}else{

dependencies=[
topLevelTypes.topMouseDown,
topLevelTypes.topMouseUp];

}

eventTypes[type].dependencies=dependencies;
});

function toArray(collection){
return collection&&Array.prototype.slice.call(collection)||[];
}

function fixIdentifier(identifier){

if(identifier>20){
return identifier%20;
}

return identifier;
}

var normalizeTouches=function normalizeTouches(touches,nativeEvent){
var timestamp=nativeEvent.timestamp||nativeEvent.timeStamp;

return toArray(touches).map(function(touch){

return{
clientX:touch.clientX,
clientY:touch.clientY,
force:touch.force,
pageX:touch.pageX,
pageY:touch.pageY,
radiusX:touch.radiusX,
radiusY:touch.radiusY,
rotationAngle:touch.rotationAngle,
screenX:touch.screenX,
screenY:touch.screenY,
target:touch.target,
timestamp:timestamp,
identifier:fixIdentifier(touch.identifier)};

});
};

var originRecordTouchTrack=_ResponderTouchHistoryStore2.default.recordTouchTrack;
_ResponderTouchHistoryStore2.default.recordTouchTrack=function(topLevelType,nativeEvent){

originRecordTouchTrack.call(_ResponderTouchHistoryStore2.default,topLevelType,{
changedTouches:normalizeTouches(nativeEvent.changedTouches,nativeEvent),
touches:normalizeTouches(nativeEvent.touches,nativeEvent)});

};

_EventPluginRegistry2.default.injectEventPluginsByName({
ResponderEventPlugin:_ResponderEventPlugin2.default});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluamVjdFJlc3BvbmRlckV2ZW50UGx1Z2luLndlYi5qcyJdLCJuYW1lcyI6WyJ0b3BMZXZlbFR5cGVzIiwiZXZlbnRUeXBlcyIsInN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwiZGVwZW5kZW5jaWVzIiwidG9wVG91Y2hTdGFydCIsInNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsInRvcFNjcm9sbCIsInNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlciIsInRvcFNlbGVjdGlvbkNoYW5nZSIsIm1vdmVTaG91bGRTZXRSZXNwb25kZXIiLCJ0b3BUb3VjaE1vdmUiLCJmb3JFYWNoIiwidHlwZSIsIndpbmRvdyIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZVVwIiwidG9BcnJheSIsImNvbGxlY3Rpb24iLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImZpeElkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibm9ybWFsaXplVG91Y2hlcyIsInRvdWNoZXMiLCJuYXRpdmVFdmVudCIsInRpbWVzdGFtcCIsInRpbWVTdGFtcCIsIm1hcCIsInRvdWNoIiwiY2xpZW50WCIsImNsaWVudFkiLCJmb3JjZSIsInBhZ2VYIiwicGFnZVkiLCJyYWRpdXNYIiwicmFkaXVzWSIsInJvdGF0aW9uQW5nbGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldCIsIm9yaWdpblJlY29yZFRvdWNoVHJhY2siLCJyZWNvcmRUb3VjaFRyYWNrIiwidG9wTGV2ZWxUeXBlIiwiY2hhbmdlZFRvdWNoZXMiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJSZXNwb25kZXJFdmVudFBsdWdpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQTs7QUFFQSxrRTtBQUNBLG9FO0FBQ0Esd0Q7QUFDQSxnRjs7QUFFQSxHQUFJQSxlQUFnQix5QkFBZUEsYUFBbkM7O0FBRUEsR0FBSUMsWUFBYSwrQkFBcUJBLFVBQXRDO0FB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KiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgRXZlbnRQbHVnaW5SZWdpc3RyeSBmcm9tICdyZWFjdC9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeSc7XG5pbXBvcnQgUmVzcG9uZGVyRXZlbnRQbHVnaW4gZnJvbSAncmVhY3QvbGliL1Jlc3BvbmRlckV2ZW50UGx1Z2luJztcbmltcG9ydCBFdmVudENvbnN0YW50cyBmcm9tICdyZWFjdC9saWIvRXZlbnRDb25zdGFudHMnO1xuaW1wb3J0IFJlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlIGZyb20gJ3JlYWN0L2xpYi9SZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZSc7XG5cbmxldCB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxubGV0IGV2ZW50VHlwZXMgPSBSZXNwb25kZXJFdmVudFBsdWdpbi5ldmVudFR5cGVzO1xuZXZlbnRUeXBlcy5zdGFydFNob3VsZFNldFJlc3BvbmRlci5kZXBlbmRlbmNpZXMgPSBbXG4gIHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydCxcbl07XG5cbmV2ZW50VHlwZXMuc2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyLmRlcGVuZGVuY2llcyA9IFtcbiAgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsXG5dO1xuXG5ldmVudFR5cGVzLnNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlci5kZXBlbmRlbmNpZXMgPSBbXG4gIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlLFxuXTtcblxuZXZlbnRUeXBlcy5tb3ZlU2hvdWxkU2V0UmVzcG9uZGVyLmRlcGVuZGVuY2llcyA9IFtcbiAgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmUsXG5dO1xuXG5bJ3Jlc3BvbmRlclN0YXJ0JywgJ3Jlc3BvbmRlck1vdmUnLCAncmVzcG9uZGVyRW5kJywgJ3Jlc3BvbmRlclJlbGVhc2UnLFxuJ3Jlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCcsICdyZXNwb25kZXJHcmFudCcsICdyZXNwb25kZXJSZWplY3QnLCAncmVzcG9uZGVyVGVybWluYXRlJ10uZm9yRWFjaCgodHlwZSkgPT4ge1xuICBsZXQgZGVwZW5kZW5jaWVzO1xuICBpZiAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB7XG4gICAgZGVwZW5kZW5jaWVzID0gW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaENhbmNlbCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZVxuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgLy8gVE9ETzogc3VwcG9ydCBtb3ZlIGV2ZW50XG4gICAgZGVwZW5kZW5jaWVzID0gW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXBcbiAgICBdO1xuICB9XG5cbiAgZXZlbnRUeXBlc1t0eXBlXS5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG59KTtcblxuZnVuY3Rpb24gdG9BcnJheShjb2xsZWN0aW9uKSB7XG4gIHJldHVybiBjb2xsZWN0aW9uICYmIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNvbGxlY3Rpb24pIHx8IFtdO1xufVxuXG5mdW5jdGlvbiBmaXhJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgLy8gU2FmYXJpIGlkZW50aWZpZXIgaXMgYSBsYXJnZSBudW1iZXJcbiAgaWYgKGlkZW50aWZpZXIgPiAyMCkge1xuICAgIHJldHVybiBpZGVudGlmaWVyICUgMjA7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcjtcbn1cblxubGV0IG5vcm1hbGl6ZVRvdWNoZXMgPSBmdW5jdGlvbih0b3VjaGVzLCBuYXRpdmVFdmVudCkge1xuICBsZXQgdGltZXN0YW1wID0gbmF0aXZlRXZlbnQudGltZXN0YW1wIHx8IG5hdGl2ZUV2ZW50LnRpbWVTdGFtcDtcblxuICByZXR1cm4gdG9BcnJheSh0b3VjaGVzKS5tYXAoKHRvdWNoKSA9PiB7XG4gICAgLy8gQ2xvbmVkIHRvdWNoXG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudFg6IHRvdWNoLmNsaWVudFgsXG4gICAgICBjbGllbnRZOiB0b3VjaC5jbGllbnRZLFxuICAgICAgZm9yY2U6IHRvdWNoLmZvcmNlLFxuICAgICAgcGFnZVg6IHRvdWNoLnBhZ2VYLFxuICAgICAgcGFnZVk6IHRvdWNoLnBhZ2VZLFxuICAgICAgcmFkaXVzWDogdG91Y2gucmFkaXVzWCxcbiAgICAgIHJhZGl1c1k6IHRvdWNoLnJhZGl1c1ksXG4gICAgICByb3RhdGlvbkFuZ2xlOiB0b3VjaC5yb3RhdGlvbkFuZ2xlLFxuICAgICAgc2NyZWVuWDogdG91Y2guc2NyZWVuWCxcbiAgICAgIHNjcmVlblk6IHRvdWNoLnNjcmVlblksXG4gICAgICB0YXJnZXQ6IHRvdWNoLnRhcmdldCxcbiAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICAgICAgaWRlbnRpZmllcjogZml4SWRlbnRpZmllcih0b3VjaC5pZGVudGlmaWVyKVxuICAgIH07XG4gIH0pO1xufTtcblxubGV0IG9yaWdpblJlY29yZFRvdWNoVHJhY2sgPSBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZS5yZWNvcmRUb3VjaFRyYWNrO1xuUmVzcG9uZGVyVG91Y2hIaXN0b3J5U3RvcmUucmVjb3JkVG91Y2hUcmFjayA9ICh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSA9PiB7XG5cbiAgb3JpZ2luUmVjb3JkVG91Y2hUcmFjay5jYWxsKFJlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlLCB0b3BMZXZlbFR5cGUsIHtcbiAgICBjaGFuZ2VkVG91Y2hlczogbm9ybWFsaXplVG91Y2hlcyhuYXRpdmVFdmVudC5jaGFuZ2VkVG91Y2hlcywgbmF0aXZlRXZlbnQpLFxuICAgIHRvdWNoZXM6IG5vcm1hbGl6ZVRvdWNoZXMobmF0aXZlRXZlbnQudG91Y2hlcywgbmF0aXZlRXZlbnQpLFxuICB9KTtcbn07XG5cbkV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtcbiAgUmVzcG9uZGVyRXZlbnRQbHVnaW5cbn0pO1xuIl19