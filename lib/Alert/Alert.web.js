








'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}

var DEFAULT_BUTTON_TEXT='OK';
var DEFAULT_BUTTON={
text:DEFAULT_BUTTON_TEXT,
onPress:null};


var noop=function noop(){};var























AlertIOS=function(){function AlertIOS(){_classCallCheck(this,AlertIOS);}_createClass(AlertIOS,null,[{key:'alert',value:function(_alert){function alert(_x,_x2,_x3,_x4){return _alert.apply(this,arguments);}alert.toString=function(){return _alert.toString();};return alert;}(function(

title,
message,
buttons,



type)
{
var callbacks=[];
var buttonsSpec=[];
title=title||'';
message=message||'';
buttons=buttons||[DEFAULT_BUTTON];
type=type||'';

buttons.forEach(function(btn,index){
callbacks[index]=btn.onPress;
var btnDef={};
btnDef[index]=btn.text||DEFAULT_BUTTON_TEXT;
buttonsSpec.push(btnDef);
});

var confirmCallback=callbacks.pop()||noop;
var cancelCallback=callbacks.pop()||noop;
if(buttons.length===1){
alert(title);
confirmCallback();
}else if(buttons.length===2){
if(confirm(title)){
confirmCallback();
}else{
cancelCallback();
}
}else{
throw new Error('max two buttons supported: [negativeActionBtn, positiveActionBtn]');
}
})},{key:'prompt',value:function(_prompt){function prompt(_x5,_x6,_x7,_x8){return _prompt.apply(this,arguments);}prompt.toString=function(){return _prompt.toString();};return prompt;}(function(


title,
value,
buttons,



callback)
{
if(arguments.length===2){
if(typeof value==='object'){
buttons=value;
value=undefined;
}else if(typeof value==='function'){
callback=value;
value=undefined;
}
}else if(arguments.length===3&&typeof buttons==='function'){
callback=buttons;
buttons=undefined;
}

if(!buttons){
buttons=[{
text:'Cancel'},
{
text:'OK',
onPress:callback}];

}

var ret=prompt(title);
if(ret&&callback){
callback();
}
})}]);return AlertIOS;}();exports.default=


AlertIOS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFsZXJ0LndlYi5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX0JVVFRPTl9URVhUIiwiREVGQVVMVF9CVVRUT04iLCJ0ZXh0Iiwib25QcmVzcyIsIm5vb3AiLCJBbGVydElPUyIsInRpdGxlIiwibWVzc2FnZSIsImJ1dHRvbnMiLCJ0eXBlIiwiY2FsbGJhY2tzIiwiYnV0dG9uc1NwZWMiLCJmb3JFYWNoIiwiYnRuIiwiaW5kZXgiLCJidG5EZWYiLCJwdXNoIiwiY29uZmlybUNhbGxiYWNrIiwicG9wIiwiY2FuY2VsQ2FsbGJhY2siLCJsZW5ndGgiLCJhbGVydCIsImNvbmZpcm0iLCJFcnJvciIsInZhbHVlIiwiY2FsbGJhY2siLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJyZXQiLCJwcm9tcHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBLGE7O0FBRUEsR0FBTUEscUJBQXNCLElBQTVCO0FBQ0EsR0FBTUMsZ0JBQWlCO0FBQ3JCQyxLQUFNRixtQkFEZTtBQUVyQkcsUUFBUyxJQUZZLENBQXZCOzs7QUFLQSxHQUFNQyxNQUFPLFFBQVBBLEtBQU8sRUFBVyxDQUFFLENBQTFCLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCTUMsUTs7QUFFRkMsSztBQUNBQyxPO0FBQ0FDLE87Ozs7QUFJQUMsSTtBQUNNO0FBQ04sR0FBSUMsV0FBWSxFQUFoQjtBQUNBLEdBQUlDLGFBQWMsRUFBbEI7QUFDQUwsTUFBUUEsT0FBUyxFQUFqQjtBQUNBQyxRQUFVQSxTQUFXLEVBQXJCO0FBQ0FDLFFBQVVBLFNBQVcsQ0FBQ1AsY0FBRCxDQUFyQjtBQUNBUSxLQUFPQSxNQUFRLEVBQWY7O0FBRUFELFFBQVFJLE9BQVIsQ0FBZ0IsU0FBQ0MsR0FBRCxDQUFNQyxLQUFOLENBQWdCO0FBQzlCSixVQUFVSSxLQUFWLEVBQW1CRCxJQUFJVixPQUF2QjtBQUNBLEdBQUlZLFFBQVMsRUFBYjtBQUNBQSxPQUFPRCxLQUFQLEVBQWdCRCxJQUFJWCxJQUFKLEVBQVlGLG1CQUE1QjtBQUNBVyxZQUFZSyxJQUFaLENBQWlCRCxNQUFqQjtBQUNELENBTEQ7O0FBT0EsR0FBTUUsaUJBQWtCUCxVQUFVUSxHQUFWLElBQW1CZCxJQUEzQztBQUNBLEdBQU1lLGdCQUFpQlQsVUFBVVEsR0FBVixJQUFtQmQsSUFBMUM7QUFDQSxHQUFJSSxRQUFRWSxNQUFSLEdBQW1CLENBQXZCLENBQTBCO0FBQ3hCQyxNQUFNZixLQUFOO0FBQ0FXO0FBQ0QsQ0FIRCxJQUdPLElBQUlULFFBQVFZLE1BQVIsR0FBbUIsQ0FBdkIsQ0FBMEI7QUFDL0IsR0FBSUUsUUFBUWhCLEtBQVIsQ0FBSixDQUFvQjtBQUNsQlc7QUFDRCxDQUZELElBRU87QUFDTEU7QUFDRDtBQUNGLENBTk0sSUFNQTtBQUNMLEtBQU0sSUFBSUksTUFBSixDQUFVLG1FQUFWLENBQU47QUFDRDtBQUNGLEM7OztBQUdDakIsSztBQUNBa0IsSztBQUNBaEIsTzs7OztBQUlBaUIsUTtBQUNNO0FBQ04sR0FBSUMsVUFBVU4sTUFBVixHQUFxQixDQUF6QixDQUE0QjtBQUMxQixHQUFJLE1BQU9JLE1BQVAsR0FBaUIsUUFBckIsQ0FBK0I7QUFDN0JoQixRQUFVZ0IsS0FBVjtBQUNBQSxNQUFRRyxTQUFSO0FBQ0QsQ0FIRCxJQUdPLElBQUksTUFBT0gsTUFBUCxHQUFpQixVQUFyQixDQUFpQztBQUN0Q0MsU0FBV0QsS0FBWDtBQUNBQSxNQUFRRyxTQUFSO0FBQ0Q7QUFDRixDQVJELElBUU8sSUFBSUQsVUFBVU4sTUFBVixHQUFxQixDQUFyQixFQUEwQixNQUFPWixRQUFQLEdBQW1CLFVBQWpELENBQTZEO0FBQ2xFaUIsU0FBV2pCLE9BQVg7QUFDQUEsUUFBVW1CLFNBQVY7QUFDRDs7QUFFRCxHQUFJLENBQUNuQixPQUFMLENBQWM7QUFDWkEsUUFBVSxDQUFDO0FBQ1ROLEtBQU0sUUFERyxDQUFEO0FBRVA7QUFDREEsS0FBTSxJQURMO0FBRURDLFFBQVNzQixRQUZSLENBRk8sQ0FBVjs7QUFNRDs7QUFFRCxHQUFJRyxLQUFNQyxPQUFPdkIsS0FBUCxDQUFWO0FBQ0EsR0FBSXNCLEtBQU9ILFFBQVgsQ0FBcUI7QUFDbkJBO0FBQ0Q7QUFDRixDOzs7QUFHWXBCLFEiLCJmaWxlIjoiQWxlcnQud2ViLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RBbGVydFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERFRkFVTFRfQlVUVE9OX1RFWFQgPSAnT0snO1xuY29uc3QgREVGQVVMVF9CVVRUT04gPSB7XG4gIHRleHQ6IERFRkFVTFRfQlVUVE9OX1RFWFQsXG4gIG9uUHJlc3M6IG51bGwsXG59O1xuXG5jb25zdCBub29wID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBMYXVuY2hlcyBhbiBhbGVydCBkaWFsb2cgd2l0aCB0aGUgc3BlY2lmaWVkIHRpdGxlIGFuZCBtZXNzYWdlLlxuICpcbiAqIE9wdGlvbmFsbHkgcHJvdmlkZSBhIGxpc3Qgb2YgYnV0dG9ucy4gVGFwcGluZyBhbnkgYnV0dG9uIHdpbGwgZmlyZSB0aGVcbiAqIHJlc3BlY3RpdmUgb25QcmVzcyBjYWxsYmFjayBhbmQgZGlzbWlzcyB0aGUgYWxlcnQuIEJ5IGRlZmF1bHQsIHRoZSBvbmx5XG4gKiBidXR0b24gd2lsbCBiZSBhbiAnT0snIGJ1dHRvblxuICpcbiAqIFRoZSBsYXN0IGJ1dHRvbiBpbiB0aGUgbGlzdCB3aWxsIGJlIGNvbnNpZGVyZWQgdGhlICdQcmltYXJ5JyBidXR0b24gYW5kXG4gKiBpdCB3aWxsIGFwcGVhciBib2xkLlxuICpcbiAqIGBgYFxuICogQWxlcnRJT1MuYWxlcnQoXG4gKiAgICdGb28gVGl0bGUnLFxuICogICAnTXkgQWxlcnQgTXNnJyxcbiAqICAgW1xuICogICAgIHt0ZXh0OiAnRm9vJywgb25QcmVzczogKCkgPT4gY29uc29sZS5sb2coJ0ZvbyBQcmVzc2VkIScpfSxcbiAqICAgICB7dGV4dDogJ0JhcicsIG9uUHJlc3M6ICgpID0+IGNvbnNvbGUubG9nKCdCYXIgUHJlc3NlZCEnKX0sXG4gKiAgIF1cbiAqIClcbiAqIGBgYFxuICovXG5cbmNsYXNzIEFsZXJ0SU9TIHtcbiAgc3RhdGljIGFsZXJ0KFxuICAgIHRpdGxlOiA/c3RyaW5nLFxuICAgIG1lc3NhZ2U/OiA/c3RyaW5nLFxuICAgIGJ1dHRvbnM/OiBBcnJheTx7XG4gICAgICB0ZXh0OiA/c3RyaW5nO1xuICAgICAgb25QcmVzcz86ID9GdW5jdGlvbjtcbiAgICB9PixcbiAgICB0eXBlPzogP3N0cmluZ1xuICApOiB2b2lkIHtcbiAgICBsZXQgY2FsbGJhY2tzID0gW107XG4gICAgbGV0IGJ1dHRvbnNTcGVjID0gW107XG4gICAgdGl0bGUgPSB0aXRsZSB8fCAnJztcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAnJztcbiAgICBidXR0b25zID0gYnV0dG9ucyB8fCBbREVGQVVMVF9CVVRUT05dO1xuICAgIHR5cGUgPSB0eXBlIHx8ICcnO1xuXG4gICAgYnV0dG9ucy5mb3JFYWNoKChidG4sIGluZGV4KSA9PiB7XG4gICAgICBjYWxsYmFja3NbaW5kZXhdID0gYnRuLm9uUHJlc3M7XG4gICAgICBsZXQgYnRuRGVmID0ge307XG4gICAgICBidG5EZWZbaW5kZXhdID0gYnRuLnRleHQgfHwgREVGQVVMVF9CVVRUT05fVEVYVDtcbiAgICAgIGJ1dHRvbnNTcGVjLnB1c2goYnRuRGVmKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbmZpcm1DYWxsYmFjayA9IGNhbGxiYWNrcy5wb3AoKSB8fCBub29wO1xuICAgIGNvbnN0IGNhbmNlbENhbGxiYWNrID0gY2FsbGJhY2tzLnBvcCgpIHx8IG5vb3A7XG4gICAgaWYgKGJ1dHRvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICBhbGVydCh0aXRsZSk7XG4gICAgICBjb25maXJtQ2FsbGJhY2soKTtcbiAgICB9IGVsc2UgaWYgKGJ1dHRvbnMubGVuZ3RoID09PSAyKSB7XG4gICAgICBpZiAoY29uZmlybSh0aXRsZSkpIHtcbiAgICAgICAgY29uZmlybUNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW5jZWxDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21heCB0d28gYnV0dG9ucyBzdXBwb3J0ZWQ6IFtuZWdhdGl2ZUFjdGlvbkJ0biwgcG9zaXRpdmVBY3Rpb25CdG5dJyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHByb21wdChcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIHZhbHVlPzogc3RyaW5nLFxuICAgIGJ1dHRvbnM/OiBBcnJheTx7XG4gICAgICB0ZXh0OiA/c3RyaW5nO1xuICAgICAgb25QcmVzcz86ID9GdW5jdGlvbjtcbiAgICB9PixcbiAgICBjYWxsYmFjaz86ID9GdW5jdGlvblxuICApOiB2b2lkIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYnV0dG9ucyA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgYnV0dG9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBidXR0b25zO1xuICAgICAgYnV0dG9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoIWJ1dHRvbnMpIHtcbiAgICAgIGJ1dHRvbnMgPSBbe1xuICAgICAgICB0ZXh0OiAnQ2FuY2VsJyxcbiAgICAgIH0sIHtcbiAgICAgICAgdGV4dDogJ09LJyxcbiAgICAgICAgb25QcmVzczogY2FsbGJhY2tcbiAgICAgIH1dO1xuICAgIH1cblxuICAgIGxldCByZXQgPSBwcm9tcHQodGl0bGUpO1xuICAgIGlmIChyZXQgJiYgY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFsZXJ0SU9TO1xuIl19