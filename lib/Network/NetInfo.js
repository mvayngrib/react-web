








var _ExecutionEnvironment=require('fbjs/lib/ExecutionEnvironment');var _ExecutionEnvironment2=_interopRequireDefault(_ExecutionEnvironment);
var _invariant=require('fbjs/lib/invariant');var _invariant2=_interopRequireDefault(_invariant);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var connection=_ExecutionEnvironment2.default.canUseDOM&&(
window.navigator.connection||
window.navigator.mozConnection||
window.navigator.webkitConnection);


var eventTypes=['change'];





var NetInfo={
addEventListener:function addEventListener(type,handler){
(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: "%s"',type);
if(!connection){
console.error('Network Connection API is not supported. Not listening for connection type changes.');
return{
remove:function remove(){}};

}

connection.addEventListener(type,handler);
return{
remove:function remove(){return NetInfo.removeEventListener(type,handler);}};

},

removeEventListener:function removeEventListener(type,handler){
(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: "%s"',type);
if(!connection){return;}
connection.removeEventListener(type,handler);
},

fetch:function fetch(){
return new Promise(function(resolve,reject){
try{
resolve(connection.type);
}catch(err){
resolve('unknown');
}
});
},

isConnected:{
addEventListener:function addEventListener(type,handler){
(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: "%s"',type);
window.addEventListener('online',handler.bind(null,true),false);
window.addEventListener('offline',handler.bind(null,false),false);

return{
remove:function remove(){return NetInfo.isConnected.removeEventListener(type,handler);}};

},

removeEventListener:function removeEventListener(type,handler){
(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: "%s"',type);
window.removeEventListener('online',handler.bind(null,true),false);
window.removeEventListener('offline',handler.bind(null,false),false);
},

fetch:function fetch(){
return new Promise(function(resolve,reject){
try{
resolve(window.navigator.onLine);
}catch(err){
resolve(true);
}
});
}}};



module.exports=NetInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5ldEluZm8uanMiXSwibmFtZXMiOlsiY29ubmVjdGlvbiIsImNhblVzZURPTSIsIndpbmRvdyIsIm5hdmlnYXRvciIsIm1vekNvbm5lY3Rpb24iLCJ3ZWJraXRDb25uZWN0aW9uIiwiZXZlbnRUeXBlcyIsIk5ldEluZm8iLCJhZGRFdmVudExpc3RlbmVyIiwidHlwZSIsImhhbmRsZXIiLCJpbmRleE9mIiwiY29uc29sZSIsImVycm9yIiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZldGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJpc0Nvbm5lY3RlZCIsImJpbmQiLCJvbkxpbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFTQSxtRTtBQUNBLDZDOztBQUVBLEdBQU1BLFlBQWEsK0JBQXFCQyxTQUFyQjtBQUNqQkMsT0FBT0MsU0FBUCxDQUFpQkgsVUFBakI7QUFDQUUsT0FBT0MsU0FBUCxDQUFpQkMsYUFEakI7QUFFQUYsT0FBT0MsU0FBUCxDQUFpQkUsZ0JBSEEsQ0FBbkI7OztBQU1BLEdBQU1DLFlBQWEsQ0FBRSxRQUFGLENBQW5COzs7Ozs7QUFNQSxHQUFNQyxTQUFVO0FBQ2RDLGdCQURjLDJCQUNHQyxJQURILENBQ2lCQyxPQURqQixDQUM0RDtBQUN4RSx3QkFBVUosV0FBV0ssT0FBWCxDQUFtQkYsSUFBbkIsSUFBNkIsQ0FBQyxDQUF4QyxDQUEyQyw0Q0FBM0MsQ0FBeUZBLElBQXpGO0FBQ0EsR0FBSSxDQUFDVCxVQUFMLENBQWlCO0FBQ2ZZLFFBQVFDLEtBQVIsQ0FBYyxxRkFBZDtBQUNBLE1BQU87QUFDTEMsT0FBUSxpQkFBTSxDQUFFLENBRFgsQ0FBUDs7QUFHRDs7QUFFRGQsV0FBV1EsZ0JBQVgsQ0FBNEJDLElBQTVCLENBQWtDQyxPQUFsQztBQUNBLE1BQU87QUFDTEksT0FBUSx3QkFBTVAsU0FBUVEsbUJBQVIsQ0FBNEJOLElBQTVCLENBQWtDQyxPQUFsQyxDQUFOLEVBREgsQ0FBUDs7QUFHRCxDQWRhOztBQWdCZEssbUJBaEJjLDhCQWdCTU4sSUFoQk4sQ0FnQm9CQyxPQWhCcEIsQ0FnQjZDO0FBQ3pELHdCQUFVSixXQUFXSyxPQUFYLENBQW1CRixJQUFuQixJQUE2QixDQUFDLENBQXhDLENBQTJDLDRDQUEzQyxDQUF5RkEsSUFBekY7QUFDQSxHQUFJLENBQUNULFVBQUwsQ0FBaUIsQ0FBRSxPQUFRO0FBQzNCQSxXQUFXZSxtQkFBWCxDQUErQk4sSUFBL0IsQ0FBcUNDLE9BQXJDO0FBQ0QsQ0FwQmE7O0FBc0JkTSxLQXRCYyxpQkFzQkc7QUFDZixNQUFPLElBQUlDLFFBQUosQ0FBWSxTQUFDQyxPQUFELENBQVVDLE1BQVYsQ0FBcUI7QUFDdEMsR0FBSTtBQUNGRCxRQUFRbEIsV0FBV1MsSUFBbkI7QUFDRCxDQUFDLE1BQU9XLEdBQVAsQ0FBWTtBQUNaRixRQUFRLFNBQVI7QUFDRDtBQUNGLENBTk0sQ0FBUDtBQU9ELENBOUJhOztBQWdDZEcsWUFBYTtBQUNYYixnQkFEVywyQkFDTUMsSUFETixDQUNvQkMsT0FEcEIsQ0FDK0Q7QUFDeEUsd0JBQVVKLFdBQVdLLE9BQVgsQ0FBbUJGLElBQW5CLElBQTZCLENBQUMsQ0FBeEMsQ0FBMkMsNENBQTNDLENBQXlGQSxJQUF6RjtBQUNBUCxPQUFPTSxnQkFBUCxDQUF3QixRQUF4QixDQUFrQ0UsUUFBUVksSUFBUixDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FBbEMsQ0FBNEQsS0FBNUQ7QUFDQXBCLE9BQU9NLGdCQUFQLENBQXdCLFNBQXhCLENBQW1DRSxRQUFRWSxJQUFSLENBQWEsSUFBYixDQUFtQixLQUFuQixDQUFuQyxDQUE4RCxLQUE5RDs7QUFFQSxNQUFPO0FBQ0xSLE9BQVEsd0JBQU1QLFNBQVFjLFdBQVIsQ0FBb0JOLG1CQUFwQixDQUF3Q04sSUFBeEMsQ0FBOENDLE9BQTlDLENBQU4sRUFESCxDQUFQOztBQUdELENBVFU7O0FBV1hLLG1CQVhXLDhCQVdTTixJQVhULENBV3VCQyxPQVh2QixDQVdnRDtBQUN6RCx3QkFBVUosV0FBV0ssT0FBWCxDQUFtQkYsSUFBbkIsSUFBNkIsQ0FBQyxDQUF4QyxDQUEyQyw0Q0FBM0MsQ0FBeUZBLElBQXpGO0FBQ0FQLE9BQU9hLG1CQUFQLENBQTJCLFFBQTNCLENBQXFDTCxRQUFRWSxJQUFSLENBQWEsSUFBYixDQUFtQixJQUFuQixDQUFyQyxDQUErRCxLQUEvRDtBQUNBcEIsT0FBT2EsbUJBQVAsQ0FBMkIsU0FBM0IsQ0FBc0NMLFFBQVFZLElBQVIsQ0FBYSxJQUFiLENBQW1CLEtBQW5CLENBQXRDLENBQWlFLEtBQWpFO0FBQ0QsQ0FmVTs7QUFpQlhOLEtBakJXLGlCQWlCTTtBQUNmLE1BQU8sSUFBSUMsUUFBSixDQUFZLFNBQUNDLE9BQUQsQ0FBVUMsTUFBVixDQUFxQjtBQUN0QyxHQUFJO0FBQ0ZELFFBQVFoQixPQUFPQyxTQUFQLENBQWlCb0IsTUFBekI7QUFDRCxDQUFDLE1BQU9ILEdBQVAsQ0FBWTtBQUNaRixRQUFRLElBQVI7QUFDRDtBQUNGLENBTk0sQ0FBUDtBQU9ELENBekJVLENBaENDLENBQWhCOzs7O0FBNkRBTSxPQUFPQyxPQUFQLENBQWlCbEIsT0FBakIiLCJmaWxlIjoiTmV0SW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE5pY29sYXMgR2FsbGFnaGVyLlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5ldEluZm9cbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IEV4ZWN1dGlvbkVudmlyb25tZW50IGZyb20gJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50J1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdmYmpzL2xpYi9pbnZhcmlhbnQnXG5cbmNvbnN0IGNvbm5lY3Rpb24gPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgKFxuICB3aW5kb3cubmF2aWdhdG9yLmNvbm5lY3Rpb24gfHxcbiAgd2luZG93Lm5hdmlnYXRvci5tb3pDb25uZWN0aW9uIHx8XG4gIHdpbmRvdy5uYXZpZ2F0b3Iud2Via2l0Q29ubmVjdGlvblxuKVxuXG5jb25zdCBldmVudFR5cGVzID0gWyAnY2hhbmdlJyBdXG5cbi8qKlxuICogTmF2aWdhdG9yIG9ubGluZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hdmlnYXRvck9uTGluZS9vbkxpbmVcbiAqIE5ldHdvcmsgQ29ubmVjdGlvbiBBUEk6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9OZXR3b3JrSW5mb3JtYXRpb25cbiAqL1xuY29uc3QgTmV0SW5mbyA9IHtcbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKTogeyByZW1vdmU6ICgpID0+IHZvaWQgfSB7XG4gICAgaW52YXJpYW50KGV2ZW50VHlwZXMuaW5kZXhPZih0eXBlKSAhPT0gLTEsICdUcnlpbmcgdG8gc3Vic2NyaWJlIHRvIHVua25vd24gZXZlbnQ6IFwiJXNcIicsIHR5cGUpXG4gICAgaWYgKCFjb25uZWN0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdOZXR3b3JrIENvbm5lY3Rpb24gQVBJIGlzIG5vdCBzdXBwb3J0ZWQuIE5vdCBsaXN0ZW5pbmcgZm9yIGNvbm5lY3Rpb24gdHlwZSBjaGFuZ2VzLicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6ICgpID0+IHt9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGlvbi5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbW92ZTogKCkgPT4gTmV0SW5mby5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpXG4gICAgfVxuICB9LFxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZTogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIGludmFyaWFudChldmVudFR5cGVzLmluZGV4T2YodHlwZSkgIT09IC0xLCAnVHJ5aW5nIHRvIHN1YnNjcmliZSB0byB1bmtub3duIGV2ZW50OiBcIiVzXCInLCB0eXBlKVxuICAgIGlmICghY29ubmVjdGlvbikgeyByZXR1cm4gfVxuICAgIGNvbm5lY3Rpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKVxuICB9LFxuXG4gIGZldGNoKCk6IFByb21pc2Uge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXNvbHZlKGNvbm5lY3Rpb24udHlwZSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXNvbHZlKCd1bmtub3duJylcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuXG4gIGlzQ29ubmVjdGVkOiB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKTogeyByZW1vdmU6ICgpID0+IHZvaWQgfSB7XG4gICAgICBpbnZhcmlhbnQoZXZlbnRUeXBlcy5pbmRleE9mKHR5cGUpICE9PSAtMSwgJ1RyeWluZyB0byBzdWJzY3JpYmUgdG8gdW5rbm93biBldmVudDogXCIlc1wiJywgdHlwZSlcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBoYW5kbGVyLmJpbmQobnVsbCwgdHJ1ZSksIGZhbHNlKVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBoYW5kbGVyLmJpbmQobnVsbCwgZmFsc2UpLCBmYWxzZSlcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiAoKSA9PiBOZXRJbmZvLmlzQ29ubmVjdGVkLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlcilcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgICBpbnZhcmlhbnQoZXZlbnRUeXBlcy5pbmRleE9mKHR5cGUpICE9PSAtMSwgJ1RyeWluZyB0byBzdWJzY3JpYmUgdG8gdW5rbm93biBldmVudDogXCIlc1wiJywgdHlwZSlcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBoYW5kbGVyLmJpbmQobnVsbCwgdHJ1ZSksIGZhbHNlKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBoYW5kbGVyLmJpbmQobnVsbCwgZmFsc2UpLCBmYWxzZSlcbiAgICB9LFxuXG4gICAgZmV0Y2goKTogUHJvbWlzZSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc29sdmUod2luZG93Lm5hdmlnYXRvci5vbkxpbmUpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOZXRJbmZvXG4iXX0=