{"version":3,"sources":["ViewPager.web.js"],"names":["deviceSize","get","VIEWPAGER_REF","ViewPager","state","selectedPage","props","initialPage","pageWidth","width","pageCount","concat","children","length","offsetLeft","Value","refs","childNodes","_panResponder","scrollEnabled","create","onStartShouldSetResponder","onMoveShouldSetPanResponder","_shouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_panResponderMove","onPanResponderTerminationRequest","onPanResponderRelease","_panResponderRelease","onPanResponderTerminate","setPage","Children","map","child","style","newProps","collapsable","_childrenWithOverridenStyle","count","translateX","interpolate","inputRange","outputRange","extrapolate","panHandlers","position","top","left","bottom","flexDirection","event","onPageScroll","keyboardDismissMode","_scrolling","stopAnimation","ev","dx","val","setValue","range","Math","abs","threshold","index","spring","toValue","bounciness","restSpeedThreshold","start","_onPageScroll","nativeEvent","offset","setState","onPageSelected","Component","propTypes","number","func","oneOf","bool","defaultProps"],"mappings":"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","file":"ViewPager.web.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Alibaba Group Holding Limited.\n * All rights reserved.\n */\n'use strict';\n\nimport React, { cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {View, Animated, Dimensions, PanResponder} from 'react-native-web';\nimport dismissKeyboard from 'react-native-web/dist/modules/dismissKeyboard';\nimport applyNativeMethods from 'react-native-web/dist/modules/applyNativeMethods';\n\nconst deviceSize = Dimensions.get('window');\nconst VIEWPAGER_REF = 'viewpager';\n\nclass ViewPager extends React.Component {\n\n  static propTypes = {\n    /**\n     * Index of initial page that should be selected. Use `setPage` method to\n     * update the page, and `onPageSelected` to monitor page changes\n     */\n    initialPage: PropTypes.number,\n\n    /**\n     * Executed when transitioning between pages (ether because of animation for\n     * the requested page change or when user is swiping/dragging between pages)\n     * The `event.nativeEvent` object for this callback will carry following data:\n     *  - position - index of first page from the left that is currently visible\n     *  - offset - value from range [0,1) describing stage between page transitions.\n     *    Value x means that (1 - x) fraction of the page at \"position\" index is\n     *    visible, and x fraction of the next page is visible.\n     */\n    onPageScroll: PropTypes.func,\n\n    /**\n     * This callback will be caleld once ViewPager finish navigating to selected page\n     * (when user swipes between pages). The `event.nativeEvent` object passed to this\n     * callback will have following fields:\n     *  - position - index of page that has been selected\n     */\n    onPageSelected: PropTypes.func,\n\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag'\n    ]),\n\n    /**\n    * When false, the content does not scroll.\n    * The default value is true.\n    */\n    scrollEnabled: PropTypes.bool\n  }\n\n  static defaultProps = {\n    initialPage: 0,\n    scrollEnabled: true\n  }\n\n  state = {\n    selectedPage: this.props.initialPage,\n    pageWidth: deviceSize.width,\n    pageCount: [].concat(this.props.children).length,\n    offsetLeft: new Animated.Value(0)\n  }\n\n  getInnerViewNode() {\n    return this.refs[VIEWPAGER_REF].childNodes[0];\n  }\n\n  componentWillMount() {\n    // let { offsetLeft, selectedPage } = this.state;\n\n    // offsetLeft.addListener(({value}) => {\n    // bad performance\n    // this._onPageScroll({\n    //  nativeEvent: {\n    //    position: selectedPage,\n    //    offset: value - selectedPage\n    //  }\n    // });\n    // });\n\n    this._panResponder = this.props.scrollEnabled && PanResponder.create({\n      onStartShouldSetResponder: () => true,\n      onMoveShouldSetPanResponder: this._shouldSetPanResponder,\n      onPanResponderGrant: () => { },\n      onPanResponderMove: this._panResponderMove,\n      onPanResponderTerminationRequest: () => true,\n      onPanResponderRelease: this._panResponderRelease,\n      onPanResponderTerminate: () => { }\n    });\n  }\n\n  componentDidMount() {\n    this.setPage(this.state.selectedPage);\n  }\n\n  _childrenWithOverridenStyle() {\n    // Override styles so that each page will fill the parent. Native component\n    // will handle positioning of elements, so it's not important to offset\n    // them correctly.\n    return React.Children.map(this.props.children, function(child) {\n      let style = {\n        ...child.props.style,\n        width: deviceSize.width\n      };\n      let newProps = {\n        style: style,\n        collapsable: false\n      };\n      return cloneElement(child, { ...child.props, ...newProps});\n    });\n  }\n\n  render() {\n    let children = this._childrenWithOverridenStyle();\n\n    let { offsetLeft, pageWidth, pageCount } = this.state;\n    let width = pageWidth * pageCount;\n    let count = pageCount - 1;\n\n    let translateX = offsetLeft.interpolate({\n      inputRange: [0, count],\n      outputRange: [0, -(pageWidth * count)],\n      extrapolate: 'clamp'\n    });\n\n    return (<View ref={VIEWPAGER_REF}\n      style={this.props.style}\n      {...this._panResponder.panHandlers}\n    >\n      <Animated.View style={{\n        width: width,\n        position: 'absolute',\n        top: 0,\n        left: translateX,\n        bottom: 0,\n        flexDirection: 'row'\n      }}>\n        {children}\n      </Animated.View>\n    </View>);\n  }\n\n  _onPageScroll(event) {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(event);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  }\n\n  _shouldSetPanResponder() {\n    if (this._scrolling) {\n      this.state.offsetLeft.stopAnimation(()=> {\n        this._scrolling = false;\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  _panResponderMove(ev, {dx}) {\n    let val = this.state.selectedPage + dx / this.state.pageWidth * -1;\n    this.state.offsetLeft.setValue(val);\n  }\n\n  _panResponderRelease(ev, {dx}) {\n    let { selectedPage, pageWidth } = this.state;\n    let range = Math.abs(dx) / pageWidth;\n    let threshold = 1 / 5;\n\n    if (range > threshold) {\n      if (dx > 0) {\n        selectedPage -= 1; // TODO step?\n      } else {\n        selectedPage += 1;\n      }\n    }\n\n    this.setPage(selectedPage);\n  }\n\n  setPage(index) {\n    if (index < 0) {\n      index = 0;\n    } else if (index >= this.state.pageCount) {\n      index = this.state.pageCount - 1;\n    }\n\n    this._scrolling = true;\n\n    Animated.spring(this.state.offsetLeft, {\n      toValue: index,\n      bounciness: 0,\n      restSpeedThreshold: 1\n    }).start(() => {\n\n      this._onPageScroll({\n        nativeEvent: {\n          position: index,\n          offset: 0\n        }\n      });\n\n      this._scrolling = false;\n\n      this.setState({\n        selectedPage: index\n      }, () => {\n        this.props.onPageSelected && this.props.onPageSelected({nativeEvent: {position: index}});\n      });\n    });\n  }\n};\n\nexport default applyNativeMethods(ViewPager);\n"]}