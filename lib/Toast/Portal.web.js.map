{"version":3,"sources":["Portal.web.js"],"names":["_portalRef","lastUsedTag","Portal","state","modals","tag","component","_getOpenModals","length","props","onModalVisibilityChanged","setState","hasOwnProperty","Object","keys","push","styles","modalsContainer","console","error","_showModal","_closeModal","create","position","left","top","right","bottom"],"mappings":"AAOA,a,ooBAEA,4B,2CACA,gD,i4BAEA,GAAIA,WAAJ,CAGA,GAAIC,aAAc,CAAlB,C,GAcMC,O,wYAiDJC,K,CAAQ,CAACC,OAAQ,EAAT,C,iHAEGC,G,CAAaC,S,CAAgB,CAGtC,GAAI,KAAKC,cAAL,GAAsBC,MAAtB,GAAiC,CAAjC,EAAsC,KAAKC,KAAL,CAAWC,wBAArD,CAA+E,CAC7E,KAAKD,KAAL,CAAWC,wBAAX,CAAoC,IAApC,EACD,CAGD,KAAKC,QAAL,CAAc,SAACR,KAAD,CAAW,CACvB,GAAIC,QAASD,MAAMC,MAAnB,CACAA,OAAOC,GAAP,EAAcC,SAAd,CACA,MAAO,CAACF,aAAD,CAAP,CACD,CAJD,EAKD,C,gDAEWC,G,CAAa,CACvB,GAAI,CAAC,KAAKF,KAAL,CAAWC,MAAX,CAAkBQ,cAAlB,CAAiCP,GAAjC,CAAL,CAA4C,CAC1C,OACD,CAGD,GAAI,KAAKE,cAAL,GAAsBC,MAAtB,GAAiC,CAAjC,EAAsC,KAAKC,KAAL,CAAWC,wBAArD,CAA+E,CAC7E,KAAKD,KAAL,CAAWC,wBAAX,CAAoC,KAApC,EACD,CAGD,KAAKC,QAAL,CAAc,SAACR,KAAD,CAAW,CACvB,GAAIC,QAASD,MAAMC,MAAnB,CACA,MAAOA,QAAOC,GAAP,CAAP,CACA,MAAO,CAACD,aAAD,CAAP,CACD,CAJD,EAKD,C,uDAE+B,CAC9B,MAAOS,QAAOC,IAAP,CAAY,KAAKX,KAAL,CAAWC,MAAvB,CAAP,CACD,C,uCAEQ,CACPJ,WAAa,IAAb,CACA,GAAI,CAAC,KAAKG,KAAL,CAAWC,MAAhB,CAAwB,CACtB,MAAO,KAAP,CACD,CACD,GAAIA,QAAS,EAAb,CACA,IAAK,GAAIC,IAAT,GAAgB,MAAKF,KAAL,CAAWC,MAA3B,CAAmC,CACjCA,OAAOW,IAAP,CAAY,KAAKZ,KAAL,CAAWC,MAAX,CAAkBC,GAAlB,CAAZ,EACD,CACD,GAAID,OAAOI,MAAP,GAAkB,CAAtB,CAAyB,CACvB,MAAO,KAAP,CACD,CACD,MACE,qDACE,MAAOQ,OAAOC,eADhB,kDAEGb,MAFH,CADF,CAMD,C,mDAnG4B,CAC3B,MAAO,WAAa,GAAEH,WAAtB,CACD,C,4CAQgBI,G,CAAaC,S,CAAgB,CAC5C,GAAI,CAACN,UAAL,CAAiB,CACfkB,QAAQC,KAAR,CAAc,oDAAd,EACA,OACD,CACDnB,WAAWoB,UAAX,CAAsBf,GAAtB,CAA2BC,SAA3B,EACD,C,8CAOiBD,G,CAAa,CAC7B,GAAI,CAACL,UAAL,CAAiB,CACfkB,QAAQC,KAAR,CAAc,qDAAd,EACA,OACD,CACDnB,WAAWqB,WAAX,CAAuBhB,GAAvB,EACD,C,qDAKqC,CACpC,GAAI,CAACL,UAAL,CAAiB,CACfkB,QAAQC,KAAR,CAAc,wDAAd,EACA,MAAO,EAAP,CACD,CACD,MAAOnB,YAAWO,cAAX,EAAP,CACD,C,sCA4DF,CAED,GAAIS,QAAS,2BAAWM,MAAX,CAAkB,CAC7BL,gBAAiB,CACfM,SAAU,UADK,CAEfC,KAAM,CAFS,CAGfC,IAAK,CAHU,CAIfC,MAAO,CAJQ,CAKfC,OAAQ,CALO,CADY,CAAlB,CAAb,C,gBAUezB,M","file":"Portal.web.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Alibaba Group Holding Limited.\n * All rights reserved.\n *\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n */\n'use strict';\n\nimport React, {Component} from 'react';\nimport {View, StyleSheet} from 'react-native-web';\n\nvar _portalRef: any;\n\n// Unique identifiers for modals.\nvar lastUsedTag = 0;\n\n/*\n * Note: Only intended for Android at the moment.  Just use Modal in your iOS\n * code.\n *\n * A container that renders all the modals on top of everything else in the application.\n *\n * Portal makes it possible for application code to pass modal views all the way up to\n * the root element created in `renderApplication`.\n *\n * Never use `<Portal>` in your code. There is only one Portal instance rendered\n * by the top-level `renderApplication`.\n */\nclass Portal extends Component {\n  /**\n   * Use this to create a new unique tag for your component that renders\n   * modals. A good place to allocate a tag is in `componentWillMount`\n   * of your component.\n   * See `showModal` and `closeModal`.\n   */\n  static allocateTag(): string {\n    return '__modal_' + ++lastUsedTag;\n  }\n\n  /**\n   * Render a new modal.\n   * @param tag A unique tag identifying the React component to render.\n   * This tag can be later used in `closeModal`.\n   * @param component A React component to be rendered.\n   */\n  static showModal(tag: string, component: any) {\n    if (!_portalRef) {\n      console.error('Calling showModal but no Portal has been rendered.');\n      return;\n    }\n    _portalRef._showModal(tag, component);\n  }\n\n  /**\n   * Remove a modal from the collection of modals to be rendered.\n   * @param tag A unique tag identifying the React component to remove.\n   * Must exactly match the tag previously passed to `showModal`.\n   */\n  static closeModal(tag: string) {\n    if (!_portalRef) {\n      console.error('Calling closeModal but no Portal has been rendered.');\n      return;\n    }\n    _portalRef._closeModal(tag);\n  }\n\n  /**\n   * Get an array of all the open modals, as identified by their tag string.\n   */\n  static getOpenModals(): Array<string> {\n    if (!_portalRef) {\n      console.error('Calling getOpenModals but no Portal has been rendered.');\n      return [];\n    }\n    return _portalRef._getOpenModals();\n  }\n\n  state = {modals: {}}\n\n  _showModal(tag: string, component: any) {\n    // We are about to open first modal, so Portal will appear.\n    // Let's disable accessibility for background view on Android.\n    if (this._getOpenModals().length === 0 && this.props.onModalVisibilityChanged) {\n      this.props.onModalVisibilityChanged(true);\n    }\n    // This way state is chained through multiple calls to\n    // _showModal, _closeModal correctly.\n    this.setState((state) => {\n      var modals = state.modals;\n      modals[tag] = component;\n      return {modals};\n    });\n  }\n\n  _closeModal(tag: string) {\n    if (!this.state.modals.hasOwnProperty(tag)) {\n      return;\n    }\n    // We are about to close last modal, so Portal will disappear.\n    // Let's enable accessibility for application view on Android.\n    if (this._getOpenModals().length === 1 && this.props.onModalVisibilityChanged) {\n      this.props.onModalVisibilityChanged(false);\n    }\n    // This way state is chained through multiple calls to\n    // _showModal, _closeModal correctly.\n    this.setState((state) => {\n      var modals = state.modals;\n      delete modals[tag];\n      return {modals};\n    });\n  }\n\n  _getOpenModals(): Array<string> {\n    return Object.keys(this.state.modals);\n  }\n\n  render() {\n    _portalRef = this;\n    if (!this.state.modals) {\n      return null;\n    }\n    var modals = [];\n    for (var tag in this.state.modals) {\n      modals.push(this.state.modals[tag]);\n    }\n    if (modals.length === 0) {\n      return null;\n    }\n    return (\n      <View\n        style={styles.modalsContainer}>\n        {modals}\n      </View>\n    );\n  }\n};\n\nvar styles = StyleSheet.create({\n  modalsContainer: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nexport default Portal;\n"]}