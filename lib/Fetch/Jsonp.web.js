





'use strict';

var _ReactPromise=require('../Promise/Promise.web');var _ReactPromise2=_interopRequireDefault(_ReactPromise);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}


var defaultOptions={
timeout:5000,
jsonpCallback:'callback'};


function generateCallbackFunction(){
return'jsonp_'+Date.now()+'_'+Math.ceil(Math.random()*100000);
}


function clearFunction(functionName){


try{
delete window[functionName];
}catch(e){
window[functionName]=undefined;
}
}

function removeScript(scriptId){
var script=document.getElementById(scriptId);
document.getElementsByTagName("head")[0].removeChild(script);
}

var fetchJsonp=function fetchJsonp(url){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};
var timeout=options.timeout!=null?options.timeout:defaultOptions.timeout;
var jsonpCallback=options.jsonpCallback!=null?options.jsonpCallback:defaultOptions.jsonpCallback;

var timeoutId=void 0;

return new _ReactPromise2.default(function(resolve,reject){
var callbackFunction=generateCallbackFunction();

window[callbackFunction]=function(response){
resolve({
ok:true,

json:function json(){
return _ReactPromise2.default.resolve(response);
}});


if(timeoutId)clearTimeout(timeoutId);

removeScript(jsonpCallback+'_'+callbackFunction);

clearFunction(callbackFunction);
};


url+=url.indexOf('?')===-1?'?':'&';

var jsonpScript=document.createElement('script');
jsonpScript.setAttribute("src",url+jsonpCallback+'='+callbackFunction);
jsonpScript.id=jsonpCallback+'_'+callbackFunction;
document.getElementsByTagName("head")[0].appendChild(jsonpScript);

timeoutId=setTimeout(function(){
reject(new Error('JSONP request to '+url+' timed out'));

clearFunction(callbackFunction);
removeScript(jsonpCallback+'_'+callbackFunction);
},timeout);
});
};

module.exports=fetchJsonp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkpzb25wLndlYi5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0T3B0aW9ucyIsInRpbWVvdXQiLCJqc29ucENhbGxiYWNrIiwiZ2VuZXJhdGVDYWxsYmFja0Z1bmN0aW9uIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJjZWlsIiwicmFuZG9tIiwiY2xlYXJGdW5jdGlvbiIsImZ1bmN0aW9uTmFtZSIsIndpbmRvdyIsImUiLCJ1bmRlZmluZWQiLCJyZW1vdmVTY3JpcHQiLCJzY3JpcHRJZCIsInNjcmlwdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlbW92ZUNoaWxkIiwiZmV0Y2hKc29ucCIsInVybCIsIm9wdGlvbnMiLCJ0aW1lb3V0SWQiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbGJhY2tGdW5jdGlvbiIsInJlc3BvbnNlIiwib2siLCJqc29uIiwiY2xlYXJUaW1lb3V0IiwiaW5kZXhPZiIsImpzb25wU2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImlkIiwiYXBwZW5kQ2hpbGQiLCJzZXRUaW1lb3V0IiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFNQTs7QUFFQSxvRDs7O0FBR0EsR0FBTUEsZ0JBQWlCO0FBQ3JCQyxRQUFTLElBRFk7QUFFckJDLGNBQWUsVUFGTSxDQUF2Qjs7O0FBS0EsUUFBU0MseUJBQVQsRUFBb0M7QUFDbEMsZUFBZ0JDLEtBQUtDLEdBQUwsRUFBaEIsS0FBOEJDLEtBQUtDLElBQUwsQ0FBVUQsS0FBS0UsTUFBTCxHQUFnQixNQUExQixDQUE5QjtBQUNEOzs7QUFHRCxRQUFTQyxjQUFULENBQXVCQyxZQUF2QixDQUFxQzs7O0FBR25DLEdBQUk7QUFDRixNQUFPQyxRQUFPRCxZQUFQLENBQVA7QUFDRCxDQUFDLE1BQU1FLENBQU4sQ0FBUztBQUNURCxPQUFPRCxZQUFQLEVBQXVCRyxTQUF2QjtBQUNEO0FBQ0Y7O0FBRUQsUUFBU0MsYUFBVCxDQUFzQkMsUUFBdEIsQ0FBZ0M7QUFDOUIsR0FBTUMsUUFBU0MsU0FBU0MsY0FBVCxDQUF3QkgsUUFBeEIsQ0FBZjtBQUNBRSxTQUFTRSxvQkFBVCxDQUE4QixNQUE5QixFQUFzQyxDQUF0QyxFQUF5Q0MsV0FBekMsQ0FBcURKLE1BQXJEO0FBQ0Q7O0FBRUQsR0FBTUssWUFBYSxRQUFiQSxXQUFhLENBQVNDLEdBQVQsQ0FBNEIsSUFBZEMsUUFBYywyREFBSixFQUFJO0FBQzdDLEdBQU10QixTQUFVc0IsUUFBUXRCLE9BQVIsRUFBbUIsSUFBbkIsQ0FBMEJzQixRQUFRdEIsT0FBbEMsQ0FBNENELGVBQWVDLE9BQTNFO0FBQ0EsR0FBTUMsZUFBZ0JxQixRQUFRckIsYUFBUixFQUF5QixJQUF6QixDQUFnQ3FCLFFBQVFyQixhQUF4QyxDQUF3REYsZUFBZUUsYUFBN0Y7O0FBRUEsR0FBSXNCLGlCQUFKOztBQUVBLE1BQU8sNEJBQVksU0FBQ0MsT0FBRCxDQUFVQyxNQUFWLENBQXFCO0FBQ3RDLEdBQU1DLGtCQUFtQnhCLDBCQUF6Qjs7QUFFQVEsT0FBT2dCLGdCQUFQLEVBQTJCLFNBQVNDLFFBQVQsQ0FBbUI7QUFDNUNILFFBQVE7QUFDTkksR0FBSSxJQURFOztBQUdOQyxLQUFNLGVBQVc7QUFDZixNQUFPLHdCQUFRTCxPQUFSLENBQWdCRyxRQUFoQixDQUFQO0FBQ0QsQ0FMSyxDQUFSOzs7QUFRQSxHQUFJSixTQUFKLENBQWVPLGFBQWFQLFNBQWI7O0FBRWZWLGFBQWFaLGNBQWdCLEdBQWhCLENBQXNCeUIsZ0JBQW5DOztBQUVBbEIsY0FBY2tCLGdCQUFkO0FBQ0QsQ0FkRDs7O0FBaUJBTCxLQUFRQSxJQUFJVSxPQUFKLENBQVksR0FBWixJQUFxQixDQUFDLENBQXZCLENBQTRCLEdBQTVCLENBQWtDLEdBQXpDOztBQUVBLEdBQU1DLGFBQWNoQixTQUFTaUIsYUFBVCxDQUF1QixRQUF2QixDQUFwQjtBQUNBRCxZQUFZRSxZQUFaLENBQXlCLEtBQXpCLENBQWdDYixJQUFNcEIsYUFBTixDQUFzQixHQUF0QixDQUE0QnlCLGdCQUE1RDtBQUNBTSxZQUFZRyxFQUFaLENBQWlCbEMsY0FBZ0IsR0FBaEIsQ0FBc0J5QixnQkFBdkM7QUFDQVYsU0FBU0Usb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsRUFBeUNrQixXQUF6QyxDQUFxREosV0FBckQ7O0FBRUFULFVBQVljLFdBQVcsVUFBTTtBQUMzQlosT0FBTyxHQUFJYSxNQUFKLHFCQUE4QmpCLEdBQTlCLGNBQVA7O0FBRUFiLGNBQWNrQixnQkFBZDtBQUNBYixhQUFhWixjQUFnQixHQUFoQixDQUFzQnlCLGdCQUFuQztBQUNELENBTFcsQ0FLVDFCLE9BTFMsQ0FBWjtBQU1ELENBakNNLENBQVA7QUFrQ0QsQ0F4Q0Q7O0FBMENBdUMsT0FBT0MsT0FBUCxDQUFpQnBCLFVBQWpCIiwiZmlsZSI6Ikpzb25wLndlYi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEFsaWJhYmEgR3JvdXAgSG9sZGluZyBMaW1pdGVkLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RKc29ucFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBQcm9taXNlIGZyb20gJ1JlYWN0UHJvbWlzZSc7XG5cbi8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL2NhbXNvbmcvZmV0Y2gtanNvbnBcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICB0aW1lb3V0OiA1MDAwLFxuICBqc29ucENhbGxiYWNrOiAnY2FsbGJhY2snXG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNhbGxiYWNrRnVuY3Rpb24oKSB7XG4gIHJldHVybiBganNvbnBfJHtEYXRlLm5vdygpfV8ke01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwKX1gO1xufVxuXG4vLyBLbm93biBpc3N1ZTogV2lsbCB0aHJvdyAnVW5jYXVnaHQgUmVmZXJlbmNlRXJyb3I6IGNhbGxiYWNrXyoqKiBpcyBub3QgZGVmaW5lZCcgZXJyb3IgaWYgcmVxdWVzdCB0aW1lb3V0XG5mdW5jdGlvbiBjbGVhckZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSkge1xuICAvLyBJRTggdGhyb3dzIGFuIGV4Y2VwdGlvbiB3aGVuIHlvdSB0cnkgdG8gZGVsZXRlIGEgcHJvcGVydHkgb24gd2luZG93XG4gIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE4MjQyMjgvNzUxMDg5XG4gIHRyeSB7XG4gICAgZGVsZXRlIHdpbmRvd1tmdW5jdGlvbk5hbWVdO1xuICB9IGNhdGNoKGUpIHtcbiAgICB3aW5kb3dbZnVuY3Rpb25OYW1lXSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVTY3JpcHQoc2NyaXB0SWQpIHtcbiAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2NyaXB0SWQpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0ucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbn1cblxuY29uc3QgZmV0Y2hKc29ucCA9IGZ1bmN0aW9uKHVybCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgIT0gbnVsbCA/IG9wdGlvbnMudGltZW91dCA6IGRlZmF1bHRPcHRpb25zLnRpbWVvdXQ7XG4gIGNvbnN0IGpzb25wQ2FsbGJhY2sgPSBvcHRpb25zLmpzb25wQ2FsbGJhY2sgIT0gbnVsbCA/IG9wdGlvbnMuanNvbnBDYWxsYmFjayA6IGRlZmF1bHRPcHRpb25zLmpzb25wQ2FsbGJhY2s7XG5cbiAgbGV0IHRpbWVvdXRJZDtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGNhbGxiYWNrRnVuY3Rpb24gPSBnZW5lcmF0ZUNhbGxiYWNrRnVuY3Rpb24oKTtcblxuICAgIHdpbmRvd1tjYWxsYmFja0Z1bmN0aW9uXSA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXNvbHZlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIC8vIGtlZXAgY29uc2lzdGVudCB3aXRoIGZldGNoIEFQSVxuICAgICAgICBqc29uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aW1lb3V0SWQpIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuXG4gICAgICByZW1vdmVTY3JpcHQoanNvbnBDYWxsYmFjayArICdfJyArIGNhbGxiYWNrRnVuY3Rpb24pO1xuXG4gICAgICBjbGVhckZ1bmN0aW9uKGNhbGxiYWNrRnVuY3Rpb24pO1xuICAgIH07XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgdXNlciBzZXQgdGhlaXIgb3duIHBhcmFtcywgYW5kIGlmIG5vdCBhZGQgYSA/IHRvIHN0YXJ0IGEgbGlzdCBvZiBwYXJhbXNcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xKSA/ICc/JyA6ICcmJztcblxuICAgIGNvbnN0IGpzb25wU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAganNvbnBTY3JpcHQuc2V0QXR0cmlidXRlKFwic3JjXCIsIHVybCArIGpzb25wQ2FsbGJhY2sgKyAnPScgKyBjYWxsYmFja0Z1bmN0aW9uKTtcbiAgICBqc29ucFNjcmlwdC5pZCA9IGpzb25wQ2FsbGJhY2sgKyAnXycgKyBjYWxsYmFja0Z1bmN0aW9uO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChqc29ucFNjcmlwdCk7XG5cbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoYEpTT05QIHJlcXVlc3QgdG8gJHt1cmx9IHRpbWVkIG91dGApKTtcblxuICAgICAgY2xlYXJGdW5jdGlvbihjYWxsYmFja0Z1bmN0aW9uKTtcbiAgICAgIHJlbW92ZVNjcmlwdChqc29ucENhbGxiYWNrICsgJ18nICsgY2FsbGJhY2tGdW5jdGlvbik7XG4gICAgfSwgdGltZW91dCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmZXRjaEpzb25wO1xuIl19