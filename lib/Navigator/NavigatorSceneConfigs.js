








'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};

var _ReactDimensions=require('../Dimensions/Dimensions.web');var _ReactDimensions2=_interopRequireDefault(_ReactDimensions);
var _ReactPixelRatio=require('../PixelRatio/PixelRatio.web');var _ReactPixelRatio2=_interopRequireDefault(_ReactPixelRatio);
var _buildStyleInterpolator=require('./polyfills/buildStyleInterpolator');var _buildStyleInterpolator2=_interopRequireDefault(_buildStyleInterpolator);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var SCREEN_WIDTH=_ReactDimensions2.default.get('window').width;
var SCREEN_HEIGHT=_ReactDimensions2.default.get('window').height;

var FadeToTheLeft={


transformTranslate:{
from:{x:0,y:0,z:0},
to:{x:-Math.round(_ReactDimensions2.default.get('window').width*0.3),y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},












transformScale:{
from:{x:1,y:1,z:1},
to:{x:0.95,y:0.95,z:1},
min:0,
max:1,
type:'linear',
extrapolate:true},

opacity:{
from:1,
to:0.3,
min:0,
max:1,
type:'linear',
extrapolate:false,
round:100},

translateX:{
from:0,
to:-Math.round(_ReactDimensions2.default.get('window').width*0.3),
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

scaleX:{
from:1,
to:0.95,
min:0,
max:1,
type:'linear',
extrapolate:true},

scaleY:{
from:1,
to:0.95,
min:0,
max:1,
type:'linear',
extrapolate:true}};



var FadeToTheRight=_extends({},
FadeToTheLeft,{
transformTranslate:{
from:{x:0,y:0,z:0},
to:{x:Math.round(SCREEN_WIDTH*0.3),y:0,z:0}},

translateX:{
from:0,
to:Math.round(SCREEN_WIDTH*0.3)}});



var FadeIn={
opacity:{
from:0,
to:1,
min:0.5,
max:1,
type:'linear',
extrapolate:false,
round:100}};



var FadeOut={
opacity:{
from:1,
to:0,
min:0,
max:0.5,
type:'linear',
extrapolate:false,
round:100}};



var ToTheLeft={
transformTranslate:{
from:{x:0,y:0,z:0},
to:{x:-_ReactDimensions2.default.get('window').width,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

opacity:{
value:1.0,
type:'constant'},


translateX:{
from:0,
to:-_ReactDimensions2.default.get('window').width,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()}};



var ToTheUp={
transformTranslate:{
from:{x:0,y:0,z:0},
to:{x:0,y:-_ReactDimensions2.default.get('window').height,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

opacity:{
value:1.0,
type:'constant'},

translateY:{
from:0,
to:-_ReactDimensions2.default.get('window').height,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()}};



var ToTheDown={
transformTranslate:{
from:{x:0,y:0,z:0},
to:{x:0,y:_ReactDimensions2.default.get('window').height,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

opacity:{
value:1.0,
type:'constant'},

translateY:{
from:0,
to:_ReactDimensions2.default.get('window').height,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()}};



var FromTheRight={
opacity:{
value:1.0,
type:'constant'},


transformTranslate:{
from:{x:_ReactDimensions2.default.get('window').width,y:0,z:0},
to:{x:0,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},


translateX:{
from:_ReactDimensions2.default.get('window').width,
to:0,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},


scaleX:{
value:1,
type:'constant'},

scaleY:{
value:1,
type:'constant'}};



var FromTheLeft=_extends({},
FromTheRight,{
transformTranslate:{
from:{x:-SCREEN_WIDTH,y:0,z:0},
to:{x:0,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

translateX:{
from:-SCREEN_WIDTH,
to:0,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()}});



var FromTheDown=_extends({},
FromTheRight,{
transformTranslate:{
from:{y:SCREEN_HEIGHT,x:0,z:0},
to:{x:0,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

translateY:{
from:SCREEN_HEIGHT,
to:0,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()}});



var FromTheTop=_extends({},
FromTheRight,{
transformTranslate:{
from:{y:-SCREEN_HEIGHT,x:0,z:0},
to:{x:0,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

translateY:{
from:-SCREEN_HEIGHT,
to:0,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()}});



var ToTheBack={


transformTranslate:{
from:{x:0,y:0,z:0},
to:{x:0,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

transformScale:{
from:{x:1,y:1,z:1},
to:{x:0.95,y:0.95,z:1},
min:0,
max:1,
type:'linear',
extrapolate:true},

opacity:{
from:1,
to:0.3,
min:0,
max:1,
type:'linear',
extrapolate:false,
round:100},

scaleX:{
from:1,
to:0.95,
min:0,
max:1,
type:'linear',
extrapolate:true},

scaleY:{
from:1,
to:0.95,
min:0,
max:1,
type:'linear',
extrapolate:true}};



var FromTheFront={
opacity:{
value:1.0,
type:'constant'},


transformTranslate:{
from:{x:0,y:_ReactDimensions2.default.get('window').height,z:0},
to:{x:0,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

translateY:{
from:_ReactDimensions2.default.get('window').height,
to:0,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

scaleX:{
value:1,
type:'constant'},

scaleY:{
value:1,
type:'constant'}};



var ToTheBackAndroid={
opacity:{
value:1,
type:'constant'}};



var FromTheFrontAndroid={
opacity:{
from:0,
to:1,
min:0.5,
max:1,
type:'linear',
extrapolate:false,
round:100},

transformTranslate:{
from:{x:0,y:100,z:0},
to:{x:0,y:0,z:0},
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()},

translateY:{
from:100,
to:0,
min:0,
max:1,
type:'linear',
extrapolate:true,
round:_ReactPixelRatio2.default.get()}};



var BaseOverswipeConfig={
frictionConstant:1,
frictionByDistance:1.5};


var BaseLeftToRightGesture={


isDetachable:false,


gestureDetectMovement:2,


notMoving:0.3,


directionRatio:0.66,


snapVelocity:2,


edgeHitWidth:30,


stillCompletionRatio:3/5,

fullDistance:SCREEN_WIDTH,

direction:'left-to-right'};



var BaseRightToLeftGesture=_extends({},
BaseLeftToRightGesture,{
direction:'right-to-left'});


var BaseDownUpGesture=_extends({},
BaseLeftToRightGesture,{
fullDistance:SCREEN_HEIGHT,
direction:'down-to-up'});


var BaseUpDownGesture=_extends({},
BaseLeftToRightGesture,{
fullDistance:SCREEN_HEIGHT,
direction:'up-to-down'});


var BaseConfig={

gestures:{
pop:BaseLeftToRightGesture},



springFriction:26,
springTension:200,


defaultTransitionVelocity:1.5,


animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FromTheRight),
out:(0,_buildStyleInterpolator2.default)(FadeToTheLeft)}};



var NavigatorSceneConfigs={
PushFromRight:_extends({},
BaseConfig),


FloatFromRight:_extends({},
BaseConfig),


FloatFromLeft:_extends({},
BaseConfig,{
animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FromTheLeft),
out:(0,_buildStyleInterpolator2.default)(FadeToTheRight)}}),


FloatFromBottom:_extends({},
BaseConfig,{
gestures:{
pop:_extends({},
BaseLeftToRightGesture,{
edgeHitWidth:150,
direction:'top-to-bottom',
fullDistance:SCREEN_HEIGHT})},


animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FromTheFront),
out:(0,_buildStyleInterpolator2.default)(ToTheBack)}}),


FloatFromBottomAndroid:_extends({},
BaseConfig,{
gestures:null,
defaultTransitionVelocity:3,
springFriction:20,
animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FromTheFrontAndroid),
out:(0,_buildStyleInterpolator2.default)(ToTheBackAndroid)}}),


FadeAndroid:_extends({},
BaseConfig,{
gestures:null,
animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FadeIn),
out:(0,_buildStyleInterpolator2.default)(FadeOut)}}),


HorizontalSwipeJump:_extends({},
BaseConfig,{
gestures:{
jumpBack:_extends({},
BaseLeftToRightGesture,{
overswipe:BaseOverswipeConfig,
edgeHitWidth:null,
isDetachable:true}),

jumpForward:_extends({},
BaseRightToLeftGesture,{
overswipe:BaseOverswipeConfig,
edgeHitWidth:null,
isDetachable:true})},


animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FromTheRight),
out:(0,_buildStyleInterpolator2.default)(ToTheLeft)}}),


VerticalUpSwipeJump:_extends({},
BaseConfig,{
gestures:{
jumpBack:_extends({},
BaseDownUpGesture,{
overswipe:BaseOverswipeConfig,
edgeHitWidth:null,
isDetachable:true}),

jumpForward:_extends({},
BaseDownUpGesture,{
overswipe:BaseOverswipeConfig,
edgeHitWidth:null,
isDetachable:true})},


animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FromTheDown),
out:(0,_buildStyleInterpolator2.default)(ToTheUp)}}),


VerticalDownSwipeJump:_extends({},
BaseConfig,{
gestures:{
jumpBack:_extends({},
BaseUpDownGesture,{
overswipe:BaseOverswipeConfig,
edgeHitWidth:null,
isDetachable:true}),

jumpForward:_extends({},
BaseUpDownGesture,{
overswipe:BaseOverswipeConfig,
edgeHitWidth:null,
isDetachable:true})},


animationInterpolators:{
into:(0,_buildStyleInterpolator2.default)(FromTheTop),
out:(0,_buildStyleInterpolator2.default)(ToTheDown)}})};




module.exports=NavigatorSceneConfigs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdmlnYXRvclNjZW5lQ29uZmlncy5qcyJdLCJuYW1lcyI6WyJTQ1JFRU5fV0lEVEgiLCJnZXQiLCJ3aWR0aCIsIlNDUkVFTl9IRUlHSFQiLCJoZWlnaHQiLCJGYWRlVG9UaGVMZWZ0IiwidHJhbnNmb3JtVHJhbnNsYXRlIiwiZnJvbSIsIngiLCJ5IiwieiIsInRvIiwiTWF0aCIsInJvdW5kIiwibWluIiwibWF4IiwidHlwZSIsImV4dHJhcG9sYXRlIiwidHJhbnNmb3JtU2NhbGUiLCJvcGFjaXR5IiwidHJhbnNsYXRlWCIsInNjYWxlWCIsInNjYWxlWSIsIkZhZGVUb1RoZVJpZ2h0IiwiRmFkZUluIiwiRmFkZU91dCIsIlRvVGhlTGVmdCIsInZhbHVlIiwiVG9UaGVVcCIsInRyYW5zbGF0ZVkiLCJUb1RoZURvd24iLCJGcm9tVGhlUmlnaHQiLCJGcm9tVGhlTGVmdCIsIkZyb21UaGVEb3duIiwiRnJvbVRoZVRvcCIsIlRvVGhlQmFjayIsIkZyb21UaGVGcm9udCIsIlRvVGhlQmFja0FuZHJvaWQiLCJGcm9tVGhlRnJvbnRBbmRyb2lkIiwiQmFzZU92ZXJzd2lwZUNvbmZpZyIsImZyaWN0aW9uQ29uc3RhbnQiLCJmcmljdGlvbkJ5RGlzdGFuY2UiLCJCYXNlTGVmdFRvUmlnaHRHZXN0dXJlIiwiaXNEZXRhY2hhYmxlIiwiZ2VzdHVyZURldGVjdE1vdmVtZW50Iiwibm90TW92aW5nIiwiZGlyZWN0aW9uUmF0aW8iLCJzbmFwVmVsb2NpdHkiLCJlZGdlSGl0V2lkdGgiLCJzdGlsbENvbXBsZXRpb25SYXRpbyIsImZ1bGxEaXN0YW5jZSIsImRpcmVjdGlvbiIsIkJhc2VSaWdodFRvTGVmdEdlc3R1cmUiLCJCYXNlRG93blVwR2VzdHVyZSIsIkJhc2VVcERvd25HZXN0dXJlIiwiQmFzZUNvbmZpZyIsImdlc3R1cmVzIiwicG9wIiwic3ByaW5nRnJpY3Rpb24iLCJzcHJpbmdUZW5zaW9uIiwiZGVmYXVsdFRyYW5zaXRpb25WZWxvY2l0eSIsImFuaW1hdGlvbkludGVycG9sYXRvcnMiLCJpbnRvIiwib3V0IiwiTmF2aWdhdG9yU2NlbmVDb25maWdzIiwiUHVzaEZyb21SaWdodCIsIkZsb2F0RnJvbVJpZ2h0IiwiRmxvYXRGcm9tTGVmdCIsIkZsb2F0RnJvbUJvdHRvbSIsIkZsb2F0RnJvbUJvdHRvbUFuZHJvaWQiLCJGYWRlQW5kcm9pZCIsIkhvcml6b250YWxTd2lwZUp1bXAiLCJqdW1wQmFjayIsIm92ZXJzd2lwZSIsImp1bXBGb3J3YXJkIiwiVmVydGljYWxVcFN3aXBlSnVtcCIsIlZlcnRpY2FsRG93blN3aXBlSnVtcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBLGE7O0FBRUEsNkQ7QUFDQSw2RDtBQUNBLDBFOztBQUVBLEdBQUlBLGNBQWUsMEJBQVdDLEdBQVgsQ0FBZSxRQUFmLEVBQXlCQyxLQUE1QztBQUNBLEdBQUlDLGVBQWdCLDBCQUFXRixHQUFYLENBQWUsUUFBZixFQUF5QkcsTUFBN0M7O0FBRUEsR0FBSUMsZUFBZ0I7OztBQUdsQkMsbUJBQW9CO0FBQ2xCQyxLQUFNLENBQUNDLEVBQUcsQ0FBSixDQUFPQyxFQUFHLENBQVYsQ0FBYUMsRUFBRyxDQUFoQixDQURZO0FBRWxCQyxHQUFJLENBQUNILEVBQUcsQ0FBQ0ksS0FBS0MsS0FBTCxDQUFXLDBCQUFXWixHQUFYLENBQWUsUUFBZixFQUF5QkMsS0FBekIsQ0FBaUMsR0FBNUMsQ0FBTCxDQUF1RE8sRUFBRyxDQUExRCxDQUE2REMsRUFBRyxDQUFoRSxDQUZjO0FBR2xCSSxJQUFLLENBSGE7QUFJbEJDLElBQUssQ0FKYTtBQUtsQkMsS0FBTSxRQUxZO0FBTWxCQyxZQUFhLElBTks7QUFPbEJKLE1BQU8sMEJBQVdaLEdBQVgsRUFQVyxDQUhGOzs7Ozs7Ozs7Ozs7O0FBdUJsQmlCLGVBQWdCO0FBQ2RYLEtBQU0sQ0FBQ0MsRUFBRyxDQUFKLENBQU9DLEVBQUcsQ0FBVixDQUFhQyxFQUFHLENBQWhCLENBRFE7QUFFZEMsR0FBSSxDQUFDSCxFQUFHLElBQUosQ0FB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aEI7QUFJRUwsYUFBYyxJQUpoQixFQURROztBQU9SK0I7QUFDS3BCLGlCQURMO0FBRUVtQixVQUFXbEMsbUJBRmI7QUFHRVMsYUFBYyxJQUhoQjtBQUlFTCxhQUFjLElBSmhCLEVBUFEsQ0FGWjs7O0FBZ0JFa0IsdUJBQXdCO0FBQ3RCQyxLQUFNLHFDQUF1QjVCLFVBQXZCLENBRGdCO0FBRXRCNkIsSUFBSyxxQ0FBdUJqQyxTQUF2QixDQUZpQixDQWhCMUIsRUEzRjBCLENBQTVCOzs7OztBQWtIQStDLE9BQU9DLE9BQVAsQ0FBaUJkLHFCQUFqQiIsImZpbGUiOiJOYXZpZ2F0b3JTY2VuZUNvbmZpZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBBbGliYWJhIEdyb3VwIEhvbGRpbmcgTGltaXRlZC5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5hdmlnYXRvclNjZW5lQ29uZmlnc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBEaW1lbnNpb25zIGZyb20gJ1JlYWN0RGltZW5zaW9ucyc7XG5pbXBvcnQgUGl4ZWxSYXRpbyBmcm9tICdSZWFjdFBpeGVsUmF0aW8nO1xuaW1wb3J0IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IgZnJvbSAnLi9wb2x5ZmlsbHMvYnVpbGRTdHlsZUludGVycG9sYXRvcic7XG5cbnZhciBTQ1JFRU5fV0lEVEggPSBEaW1lbnNpb25zLmdldCgnd2luZG93Jykud2lkdGg7XG52YXIgU0NSRUVOX0hFSUdIVCA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5oZWlnaHQ7XG5cbnZhciBGYWRlVG9UaGVMZWZ0ID0ge1xuICAvLyBSb3RhdGUgKnJlcXVpcmVzKiB5b3UgdG8gYnJlYWsgb3V0IGVhY2ggaW5kaXZpZHVhbCBjb21wb25lbnQgb2ZcbiAgLy8gcm90YXRpb24gKHgsIHksIHosIHcpXG4gIHRyYW5zZm9ybVRyYW5zbGF0ZToge1xuICAgIGZyb206IHt4OiAwLCB5OiAwLCB6OiAwfSxcbiAgICB0bzoge3g6IC1NYXRoLnJvdW5kKERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS53aWR0aCAqIDAuMyksIHk6IDAsIHo6IDB9LFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG4gIC8vIFVuY29tbWVudCB0byB0cnkgcm90YXRpb246XG4gIC8vIFF1aWNrIGd1aWRlIHRvIHJlYXNvbmluZyBhYm91dCByb3RhdGlvbnM6XG4gIC8vIGh0dHA6Ly93d3cub3BlbmdsLXR1dG9yaWFsLm9yZy9pbnRlcm1lZGlhdGUtdHV0b3JpYWxzL3R1dG9yaWFsLTE3LXF1YXRlcm5pb25zLyNRdWF0ZXJuaW9uc1xuICAvLyB0cmFuc2Zvcm1Sb3RhdGVSYWRpYW5zOiB7XG4gIC8vICAgZnJvbToge3g6IDAsIHk6IDAsIHo6IDAsIHc6IDF9LFxuICAvLyAgIHRvOiB7eDogMCwgeTogMCwgejogLTAuNDcsIHc6IDAuODd9LFxuICAvLyAgIG1pbjogMCxcbiAgLy8gICBtYXg6IDEsXG4gIC8vICAgdHlwZTogJ2xpbmVhcicsXG4gIC8vICAgZXh0cmFwb2xhdGU6IHRydWVcbiAgLy8gfSxcbiAgdHJhbnNmb3JtU2NhbGU6IHtcbiAgICBmcm9tOiB7eDogMSwgeTogMSwgejogMX0sXG4gICAgdG86IHt4OiAwLjk1LCB5OiAwLjk1LCB6OiAxfSxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxLFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiB0cnVlXG4gIH0sXG4gIG9wYWNpdHk6IHtcbiAgICBmcm9tOiAxLFxuICAgIHRvOiAwLjMsXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogZmFsc2UsXG4gICAgcm91bmQ6IDEwMCxcbiAgfSxcbiAgdHJhbnNsYXRlWDoge1xuICAgIGZyb206IDAsXG4gICAgdG86IC1NYXRoLnJvdW5kKERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS53aWR0aCAqIDAuMyksXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcbiAgc2NhbGVYOiB7XG4gICAgZnJvbTogMSxcbiAgICB0bzogMC45NSxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxLFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiB0cnVlXG4gIH0sXG4gIHNjYWxlWToge1xuICAgIGZyb206IDEsXG4gICAgdG86IDAuOTUsXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZVxuICB9LFxufTtcblxudmFyIEZhZGVUb1RoZVJpZ2h0ID0ge1xuICAuLi5GYWRlVG9UaGVMZWZ0LFxuICB0cmFuc2Zvcm1UcmFuc2xhdGU6IHtcbiAgICBmcm9tOiB7eDogMCwgeTogMCwgejogMH0sXG4gICAgdG86IHt4OiBNYXRoLnJvdW5kKFNDUkVFTl9XSURUSCAqIDAuMyksIHk6IDAsIHo6IDB9LFxuICB9LFxuICB0cmFuc2xhdGVYOiB7XG4gICAgZnJvbTogMCxcbiAgICB0bzogTWF0aC5yb3VuZChTQ1JFRU5fV0lEVEggKiAwLjMpLFxuICB9XG59O1xuXG52YXIgRmFkZUluID0ge1xuICBvcGFjaXR5OiB7XG4gICAgZnJvbTogMCxcbiAgICB0bzogMSxcbiAgICBtaW46IDAuNSxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IGZhbHNlLFxuICAgIHJvdW5kOiAxMDAsXG4gIH0sXG59O1xuXG52YXIgRmFkZU91dCA9IHtcbiAgb3BhY2l0eToge1xuICAgIGZyb206IDEsXG4gICAgdG86IDAsXG4gICAgbWluOiAwLFxuICAgIG1heDogMC41LFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiBmYWxzZSxcbiAgICByb3VuZDogMTAwLFxuICB9LFxufTtcblxudmFyIFRvVGhlTGVmdCA9IHtcbiAgdHJhbnNmb3JtVHJhbnNsYXRlOiB7XG4gICAgZnJvbToge3g6IDAsIHk6IDAsIHo6IDB9LFxuICAgIHRvOiB7eDogLURpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS53aWR0aCwgeTogMCwgejogMH0sXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcbiAgb3BhY2l0eToge1xuICAgIHZhbHVlOiAxLjAsXG4gICAgdHlwZTogJ2NvbnN0YW50JyxcbiAgfSxcblxuICB0cmFuc2xhdGVYOiB7XG4gICAgZnJvbTogMCxcbiAgICB0bzogLURpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS53aWR0aCxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxLFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiB0cnVlLFxuICAgIHJvdW5kOiBQaXhlbFJhdGlvLmdldCgpLFxuICB9LFxufTtcblxudmFyIFRvVGhlVXAgPSB7XG4gIHRyYW5zZm9ybVRyYW5zbGF0ZToge1xuICAgIGZyb206IHt4OiAwLCB5OiAwLCB6OiAwfSxcbiAgICB0bzoge3g6IDAsIHk6IC1EaW1lbnNpb25zLmdldCgnd2luZG93JykuaGVpZ2h0LCB6OiAwfSxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxLFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiB0cnVlLFxuICAgIHJvdW5kOiBQaXhlbFJhdGlvLmdldCgpLFxuICB9LFxuICBvcGFjaXR5OiB7XG4gICAgdmFsdWU6IDEuMCxcbiAgICB0eXBlOiAnY29uc3RhbnQnLFxuICB9LFxuICB0cmFuc2xhdGVZOiB7XG4gICAgZnJvbTogMCxcbiAgICB0bzogLURpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5oZWlnaHQsXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcbn07XG5cbnZhciBUb1RoZURvd24gPSB7XG4gIHRyYW5zZm9ybVRyYW5zbGF0ZToge1xuICAgIGZyb206IHt4OiAwLCB5OiAwLCB6OiAwfSxcbiAgICB0bzoge3g6IDAsIHk6IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5oZWlnaHQsIHo6IDB9LFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG4gIG9wYWNpdHk6IHtcbiAgICB2YWx1ZTogMS4wLFxuICAgIHR5cGU6ICdjb25zdGFudCcsXG4gIH0sXG4gIHRyYW5zbGF0ZVk6IHtcbiAgICBmcm9tOiAwLFxuICAgIHRvOiBEaW1lbnNpb25zLmdldCgnd2luZG93JykuaGVpZ2h0LFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG59O1xuXG52YXIgRnJvbVRoZVJpZ2h0ID0ge1xuICBvcGFjaXR5OiB7XG4gICAgdmFsdWU6IDEuMCxcbiAgICB0eXBlOiAnY29uc3RhbnQnLFxuICB9LFxuXG4gIHRyYW5zZm9ybVRyYW5zbGF0ZToge1xuICAgIGZyb206IHt4OiBEaW1lbnNpb25zLmdldCgnd2luZG93Jykud2lkdGgsIHk6IDAsIHo6IDB9LFxuICAgIHRvOiB7eDogMCwgeTogMCwgejogMH0sXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcblxuICB0cmFuc2xhdGVYOiB7XG4gICAgZnJvbTogRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpLndpZHRoLFxuICAgIHRvOiAwLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG5cbiAgc2NhbGVYOiB7XG4gICAgdmFsdWU6IDEsXG4gICAgdHlwZTogJ2NvbnN0YW50JyxcbiAgfSxcbiAgc2NhbGVZOiB7XG4gICAgdmFsdWU6IDEsXG4gICAgdHlwZTogJ2NvbnN0YW50JyxcbiAgfSxcbn07XG5cbnZhciBGcm9tVGhlTGVmdCA9IHtcbiAgLi4uRnJvbVRoZVJpZ2h0LFxuICB0cmFuc2Zvcm1UcmFuc2xhdGU6IHtcbiAgICBmcm9tOiB7eDogLVNDUkVFTl9XSURUSCwgeTogMCwgejogMH0sXG4gICAgdG86IHt4OiAwLCB5OiAwLCB6OiAwfSxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxLFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiB0cnVlLFxuICAgIHJvdW5kOiBQaXhlbFJhdGlvLmdldCgpLFxuICB9LFxuICB0cmFuc2xhdGVYOiB7XG4gICAgZnJvbTogLVNDUkVFTl9XSURUSCxcbiAgICB0bzogMCxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxLFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiB0cnVlLFxuICAgIHJvdW5kOiBQaXhlbFJhdGlvLmdldCgpLFxuICB9LFxufTtcblxudmFyIEZyb21UaGVEb3duID0ge1xuICAuLi5Gcm9tVGhlUmlnaHQsXG4gIHRyYW5zZm9ybVRyYW5zbGF0ZToge1xuICAgIGZyb206IHt5OiBTQ1JFRU5fSEVJR0hULCB4OiAwLCB6OiAwfSxcbiAgICB0bzoge3g6IDAsIHk6IDAsIHo6IDB9LFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG4gIHRyYW5zbGF0ZVk6IHtcbiAgICBmcm9tOiBTQ1JFRU5fSEVJR0hULFxuICAgIHRvOiAwLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG59O1xuXG52YXIgRnJvbVRoZVRvcCA9IHtcbiAgLi4uRnJvbVRoZVJpZ2h0LFxuICB0cmFuc2Zvcm1UcmFuc2xhdGU6IHtcbiAgICBmcm9tOiB7eTogLVNDUkVFTl9IRUlHSFQsIHg6IDAsIHo6IDB9LFxuICAgIHRvOiB7eDogMCwgeTogMCwgejogMH0sXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcbiAgdHJhbnNsYXRlWToge1xuICAgIGZyb206IC1TQ1JFRU5fSEVJR0hULFxuICAgIHRvOiAwLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG59O1xuXG52YXIgVG9UaGVCYWNrID0ge1xuICAvLyBSb3RhdGUgKnJlcXVpcmVzKiB5b3UgdG8gYnJlYWsgb3V0IGVhY2ggaW5kaXZpZHVhbCBjb21wb25lbnQgb2ZcbiAgLy8gcm90YXRpb24gKHgsIHksIHosIHcpXG4gIHRyYW5zZm9ybVRyYW5zbGF0ZToge1xuICAgIGZyb206IHt4OiAwLCB5OiAwLCB6OiAwfSxcbiAgICB0bzoge3g6IDAsIHk6IDAsIHo6IDB9LFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWUsXG4gICAgcm91bmQ6IFBpeGVsUmF0aW8uZ2V0KCksXG4gIH0sXG4gIHRyYW5zZm9ybVNjYWxlOiB7XG4gICAgZnJvbToge3g6IDEsIHk6IDEsIHo6IDF9LFxuICAgIHRvOiB7eDogMC45NSwgeTogMC45NSwgejogMX0sXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZVxuICB9LFxuICBvcGFjaXR5OiB7XG4gICAgZnJvbTogMSxcbiAgICB0bzogMC4zLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IGZhbHNlLFxuICAgIHJvdW5kOiAxMDAsXG4gIH0sXG4gIHNjYWxlWDoge1xuICAgIGZyb206IDEsXG4gICAgdG86IDAuOTUsXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZVxuICB9LFxuICBzY2FsZVk6IHtcbiAgICBmcm9tOiAxLFxuICAgIHRvOiAwLjk1LFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IHRydWVcbiAgfSxcbn07XG5cbnZhciBGcm9tVGhlRnJvbnQgPSB7XG4gIG9wYWNpdHk6IHtcbiAgICB2YWx1ZTogMS4wLFxuICAgIHR5cGU6ICdjb25zdGFudCcsXG4gIH0sXG5cbiAgdHJhbnNmb3JtVHJhbnNsYXRlOiB7XG4gICAgZnJvbToge3g6IDAsIHk6IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5oZWlnaHQsIHo6IDB9LFxuICAgIHRvOiB7eDogMCwgeTogMCwgejogMH0sXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcbiAgdHJhbnNsYXRlWToge1xuICAgIGZyb206IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5oZWlnaHQsXG4gICAgdG86IDAsXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcbiAgc2NhbGVYOiB7XG4gICAgdmFsdWU6IDEsXG4gICAgdHlwZTogJ2NvbnN0YW50JyxcbiAgfSxcbiAgc2NhbGVZOiB7XG4gICAgdmFsdWU6IDEsXG4gICAgdHlwZTogJ2NvbnN0YW50JyxcbiAgfSxcbn07XG5cbnZhciBUb1RoZUJhY2tBbmRyb2lkID0ge1xuICBvcGFjaXR5OiB7XG4gICAgdmFsdWU6IDEsXG4gICAgdHlwZTogJ2NvbnN0YW50JyxcbiAgfSxcbn07XG5cbnZhciBGcm9tVGhlRnJvbnRBbmRyb2lkID0ge1xuICBvcGFjaXR5OiB7XG4gICAgZnJvbTogMCxcbiAgICB0bzogMSxcbiAgICBtaW46IDAuNSxcbiAgICBtYXg6IDEsXG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgZXh0cmFwb2xhdGU6IGZhbHNlLFxuICAgIHJvdW5kOiAxMDAsXG4gIH0sXG4gIHRyYW5zZm9ybVRyYW5zbGF0ZToge1xuICAgIGZyb206IHt4OiAwLCB5OiAxMDAsIHo6IDB9LFxuICAgIHRvOiB7eDogMCwgeTogMCwgejogMH0sXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgICB0eXBlOiAnbGluZWFyJyxcbiAgICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgICByb3VuZDogUGl4ZWxSYXRpby5nZXQoKSxcbiAgfSxcbiAgdHJhbnNsYXRlWToge1xuICAgIGZyb206IDEwMCxcbiAgICB0bzogMCxcbiAgICBtaW46IDAsXG4gICAgbWF4OiAxLFxuICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIGV4dHJhcG9sYXRlOiB0cnVlLFxuICAgIHJvdW5kOiBQaXhlbFJhdGlvLmdldCgpLFxuICB9LFxufTtcblxudmFyIEJhc2VPdmVyc3dpcGVDb25maWcgPSB7XG4gIGZyaWN0aW9uQ29uc3RhbnQ6IDEsXG4gIGZyaWN0aW9uQnlEaXN0YW5jZTogMS41LFxufTtcblxudmFyIEJhc2VMZWZ0VG9SaWdodEdlc3R1cmUgPSB7XG5cbiAgLy8gSWYgdGhlIGdlc3R1cmUgY2FuIGVuZCBhbmQgcmVzdGFydCBkdXJpbmcgb25lIGNvbnRpbnVvdXMgdG91Y2hcbiAgaXNEZXRhY2hhYmxlOiBmYWxzZSxcblxuICAvLyBIb3cgZmFyIHRoZSBzd2lwZSBtdXN0IGRyYWcgdG8gc3RhcnQgdHJhbnNpdGlvbmluZ1xuICBnZXN0dXJlRGV0ZWN0TW92ZW1lbnQ6IDIsXG5cbiAgLy8gQW1wbGl0dWRlIG9mIHJlbGVhc2UgdmVsb2NpdHkgdGhhdCBpcyBjb25zaWRlcmVkIHN0aWxsXG4gIG5vdE1vdmluZzogMC4zLFxuXG4gIC8vIEZyYWN0aW9uIG9mIGRpcmVjdGlvbmFsIG1vdmUgcmVxdWlyZWQuXG4gIGRpcmVjdGlvblJhdGlvOiAwLjY2LFxuXG4gIC8vIFZlbG9jaXR5IHRvIHRyYW5zaXRpb24gd2l0aCB3aGVuIHRoZSBnZXN0dXJlIHJlbGVhc2Ugd2FzIFwibm90IG1vdmluZ1wiXG4gIHNuYXBWZWxvY2l0eTogMixcblxuICAvLyBSZWdpb24gdGhhdCBjYW4gdHJpZ2dlciBzd2lwZS4gaU9TIGRlZmF1bHQgaXMgMzBweCBmcm9tIHRoZSBsZWZ0IGVkZ2VcbiAgZWRnZUhpdFdpZHRoOiAzMCxcblxuICAvLyBSYXRpbyBvZiBnZXN0dXJlIGNvbXBsZXRpb24gd2hlbiBub24tdmVsb2NpdHkgcmVsZWFzZSB3aWxsIGNhdXNlIGFjdGlvblxuICBzdGlsbENvbXBsZXRpb25SYXRpbzogMyAvIDUsXG5cbiAgZnVsbERpc3RhbmNlOiBTQ1JFRU5fV0lEVEgsXG5cbiAgZGlyZWN0aW9uOiAnbGVmdC10by1yaWdodCcsXG5cbn07XG5cbnZhciBCYXNlUmlnaHRUb0xlZnRHZXN0dXJlID0ge1xuICAuLi5CYXNlTGVmdFRvUmlnaHRHZXN0dXJlLFxuICBkaXJlY3Rpb246ICdyaWdodC10by1sZWZ0Jyxcbn07XG5cbnZhciBCYXNlRG93blVwR2VzdHVyZSA9IHtcbiAgLi4uQmFzZUxlZnRUb1JpZ2h0R2VzdHVyZSxcbiAgZnVsbERpc3RhbmNlOiBTQ1JFRU5fSEVJR0hULFxuICBkaXJlY3Rpb246ICdkb3duLXRvLXVwJyxcbn07XG5cbnZhciBCYXNlVXBEb3duR2VzdHVyZSA9IHtcbiAgLi4uQmFzZUxlZnRUb1JpZ2h0R2VzdHVyZSxcbiAgZnVsbERpc3RhbmNlOiBTQ1JFRU5fSEVJR0hULFxuICBkaXJlY3Rpb246ICd1cC10by1kb3duJyxcbn07XG5cbnZhciBCYXNlQ29uZmlnID0ge1xuICAvLyBBIGxpc3Qgb2YgYWxsIGdlc3R1cmVzIHRoYXQgYXJlIGVuYWJsZWQgb24gdGhpcyBzY2VuZVxuICBnZXN0dXJlczoge1xuICAgIHBvcDogQmFzZUxlZnRUb1JpZ2h0R2VzdHVyZSxcbiAgfSxcblxuICAvLyBSZWJvdW5kIHNwcmluZyBwYXJhbWV0ZXJzIHdoZW4gdHJhbnNpdGlvbmluZyBGUk9NIHRoaXMgc2NlbmVcbiAgc3ByaW5nRnJpY3Rpb246IDI2LFxuICBzcHJpbmdUZW5zaW9uOiAyMDAsXG5cbiAgLy8gVmVsb2NpdHkgdG8gc3RhcnQgYXQgd2hlbiB0cmFuc2l0aW9uaW5nIHdpdGhvdXQgZ2VzdHVyZVxuICBkZWZhdWx0VHJhbnNpdGlvblZlbG9jaXR5OiAxLjUsXG5cbiAgLy8gQW5pbWF0aW9uIGludGVycG9sYXRvcnMgZm9yIGhvcml6b250YWwgdHJhbnNpdGlvbmluZzpcbiAgYW5pbWF0aW9uSW50ZXJwb2xhdG9yczoge1xuICAgIGludG86IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoRnJvbVRoZVJpZ2h0KSxcbiAgICBvdXQ6IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoRmFkZVRvVGhlTGVmdCksXG4gIH0sXG59O1xuXG52YXIgTmF2aWdhdG9yU2NlbmVDb25maWdzID0ge1xuICBQdXNoRnJvbVJpZ2h0OiB7XG4gICAgLi4uQmFzZUNvbmZpZyxcbiAgICAvLyBXZSB3aWxsIHdhbnQgdG8gY3VzdG9taXplIHRoaXMgc29vblxuICB9LFxuICBGbG9hdEZyb21SaWdodDoge1xuICAgIC4uLkJhc2VDb25maWcsXG4gICAgLy8gV2Ugd2lsbCB3YW50IHRvIGN1c3RvbWl6ZSB0aGlzIHNvb25cbiAgfSxcbiAgRmxvYXRGcm9tTGVmdDoge1xuICAgIC4uLkJhc2VDb25maWcsXG4gICAgYW5pbWF0aW9uSW50ZXJwb2xhdG9yczoge1xuICAgICAgaW50bzogYnVpbGRTdHlsZUludGVycG9sYXRvcihGcm9tVGhlTGVmdCksXG4gICAgICBvdXQ6IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoRmFkZVRvVGhlUmlnaHQpLFxuICAgIH0sXG4gIH0sXG4gIEZsb2F0RnJvbUJvdHRvbToge1xuICAgIC4uLkJhc2VDb25maWcsXG4gICAgZ2VzdHVyZXM6IHtcbiAgICAgIHBvcDoge1xuICAgICAgICAuLi5CYXNlTGVmdFRvUmlnaHRHZXN0dXJlLFxuICAgICAgICBlZGdlSGl0V2lkdGg6IDE1MCxcbiAgICAgICAgZGlyZWN0aW9uOiAndG9wLXRvLWJvdHRvbScsXG4gICAgICAgIGZ1bGxEaXN0YW5jZTogU0NSRUVOX0hFSUdIVCxcbiAgICAgIH1cbiAgICB9LFxuICAgIGFuaW1hdGlvbkludGVycG9sYXRvcnM6IHtcbiAgICAgIGludG86IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoRnJvbVRoZUZyb250KSxcbiAgICAgIG91dDogYnVpbGRTdHlsZUludGVycG9sYXRvcihUb1RoZUJhY2spLFxuICAgIH0sXG4gIH0sXG4gIEZsb2F0RnJvbUJvdHRvbUFuZHJvaWQ6IHtcbiAgICAuLi5CYXNlQ29uZmlnLFxuICAgIGdlc3R1cmVzOiBudWxsLFxuICAgIGRlZmF1bHRUcmFuc2l0aW9uVmVsb2NpdHk6IDMsXG4gICAgc3ByaW5nRnJpY3Rpb246IDIwLFxuICAgIGFuaW1hdGlvbkludGVycG9sYXRvcnM6IHtcbiAgICAgIGludG86IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoRnJvbVRoZUZyb250QW5kcm9pZCksXG4gICAgICBvdXQ6IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoVG9UaGVCYWNrQW5kcm9pZCksXG4gICAgfSxcbiAgfSxcbiAgRmFkZUFuZHJvaWQ6IHtcbiAgICAuLi5CYXNlQ29uZmlnLFxuICAgIGdlc3R1cmVzOiBudWxsLFxuICAgIGFuaW1hdGlvbkludGVycG9sYXRvcnM6IHtcbiAgICAgIGludG86IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoRmFkZUluKSxcbiAgICAgIG91dDogYnVpbGRTdHlsZUludGVycG9sYXRvcihGYWRlT3V0KSxcbiAgICB9LFxuICB9LFxuICBIb3Jpem9udGFsU3dpcGVKdW1wOiB7XG4gICAgLi4uQmFzZUNvbmZpZyxcbiAgICBnZXN0dXJlczoge1xuICAgICAganVtcEJhY2s6IHtcbiAgICAgICAgLi4uQmFzZUxlZnRUb1JpZ2h0R2VzdHVyZSxcbiAgICAgICAgb3ZlcnN3aXBlOiBCYXNlT3ZlcnN3aXBlQ29uZmlnLFxuICAgICAgICBlZGdlSGl0V2lkdGg6IG51bGwsXG4gICAgICAgIGlzRGV0YWNoYWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBqdW1wRm9yd2FyZDoge1xuICAgICAgICAuLi5CYXNlUmlnaHRUb0xlZnRHZXN0dXJlLFxuICAgICAgICBvdmVyc3dpcGU6IEJhc2VPdmVyc3dpcGVDb25maWcsXG4gICAgICAgIGVkZ2VIaXRXaWR0aDogbnVsbCxcbiAgICAgICAgaXNEZXRhY2hhYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGFuaW1hdGlvbkludGVycG9sYXRvcnM6IHtcbiAgICAgIGludG86IGJ1aWxkU3R5bGVJbnRlcnBvbGF0b3IoRnJvbVRoZVJpZ2h0KSxcbiAgICAgIG91dDogYnVpbGRTdHlsZUludGVycG9sYXRvcihUb1RoZUxlZnQpLFxuICAgIH0sXG4gIH0sXG4gIFZlcnRpY2FsVXBTd2lwZUp1bXA6IHtcbiAgICAuLi5CYXNlQ29uZmlnLFxuICAgIGdlc3R1cmVzOiB7XG4gICAgICBqdW1wQmFjazoge1xuICAgICAgICAuLi5CYXNlRG93blVwR2VzdHVyZSxcbiAgICAgICAgb3ZlcnN3aXBlOiBCYXNlT3ZlcnN3aXBlQ29uZmlnLFxuICAgICAgICBlZGdlSGl0V2lkdGg6IG51bGwsXG4gICAgICAgIGlzRGV0YWNoYWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBqdW1wRm9yd2FyZDoge1xuICAgICAgICAuLi5CYXNlRG93blVwR2VzdHVyZSxcbiAgICAgICAgb3ZlcnN3aXBlOiBCYXNlT3ZlcnN3aXBlQ29uZmlnLFxuICAgICAgICBlZGdlSGl0V2lkdGg6IG51bGwsXG4gICAgICAgIGlzRGV0YWNoYWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBhbmltYXRpb25JbnRlcnBvbGF0b3JzOiB7XG4gICAgICBpbnRvOiBidWlsZFN0eWxlSW50ZXJwb2xhdG9yKEZyb21UaGVEb3duKSxcbiAgICAgIG91dDogYnVpbGRTdHlsZUludGVycG9sYXRvcihUb1RoZVVwKSxcbiAgICB9LFxuICB9LFxuICBWZXJ0aWNhbERvd25Td2lwZUp1bXA6IHtcbiAgICAuLi5CYXNlQ29uZmlnLFxuICAgIGdlc3R1cmVzOiB7XG4gICAgICBqdW1wQmFjazoge1xuICAgICAgICAuLi5CYXNlVXBEb3duR2VzdHVyZSxcbiAgICAgICAgb3ZlcnN3aXBlOiBCYXNlT3ZlcnN3aXBlQ29uZmlnLFxuICAgICAgICBlZGdlSGl0V2lkdGg6IG51bGwsXG4gICAgICAgIGlzRGV0YWNoYWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBqdW1wRm9yd2FyZDoge1xuICAgICAgICAuLi5CYXNlVXBEb3duR2VzdHVyZSxcbiAgICAgICAgb3ZlcnN3aXBlOiBCYXNlT3ZlcnN3aXBlQ29uZmlnLFxuICAgICAgICBlZGdlSGl0V2lkdGg6IG51bGwsXG4gICAgICAgIGlzRGV0YWNoYWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBhbmltYXRpb25JbnRlcnBvbGF0b3JzOiB7XG4gICAgICBpbnRvOiBidWlsZFN0eWxlSW50ZXJwb2xhdG9yKEZyb21UaGVUb3ApLFxuICAgICAgb3V0OiBidWlsZFN0eWxlSW50ZXJwb2xhdG9yKFRvVGhlRG93biksXG4gICAgfSxcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdG9yU2NlbmVDb25maWdzO1xuIl19