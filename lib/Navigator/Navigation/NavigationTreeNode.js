











'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();

var _invariant=require('fbjs/lib/invariant');var _invariant2=_interopRequireDefault(_invariant);
var _immutable=require('immutable');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var






NavigationTreeNode=function(){






function NavigationTreeNode(value){_classCallCheck(this,NavigationTreeNode);
this.__parent=null;
this._children=new _immutable.List();
this._value=value;
}_createClass(NavigationTreeNode,[{key:'getValue',value:function getValue()

{
return this._value;
}},{key:'getParent',value:function getParent()

{
return this.__parent;
}},{key:'getChildrenCount',value:function getChildrenCount()

{
return this._children.size;
}},{key:'getChildAt',value:function getChildAt(

index){
return index>-1&&index<this._children.size?
this._children.get(index):
null;
}},{key:'appendChild',value:function appendChild(

child){
if(child.__parent){
child.__parent.removeChild(child);
}
child.__parent=this;
this._children=this._children.push(child);
}},{key:'removeChild',value:function removeChild(

child){
var index=this._children.indexOf(child);

(0,_invariant2.default)(
index>-1,
'The node to be removed is not a child of this node.');


child.__parent=null;

this._children=this._children.splice(index,1);
}},{key:'indexOf',value:function indexOf(

child){
return this._children.indexOf(child);
}},{key:'forEach',value:function forEach(

callback,context){
this._children.forEach(callback,context);
}},{key:'map',value:function map(

callback,context){
return this._children.map(callback,context).toJS();
}},{key:'some',value:function some(

callback,context){
return this._children.some(callback,context);
}}]);return NavigationTreeNode;}();



module.exports=NavigationTreeNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdmlnYXRpb25UcmVlTm9kZS5qcyJdLCJuYW1lcyI6WyJOYXZpZ2F0aW9uVHJlZU5vZGUiLCJ2YWx1ZSIsIl9fcGFyZW50IiwiX2NoaWxkcmVuIiwiX3ZhbHVlIiwic2l6ZSIsImluZGV4IiwiZ2V0IiwiY2hpbGQiLCJyZW1vdmVDaGlsZCIsInB1c2giLCJpbmRleE9mIiwic3BsaWNlIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiZm9yRWFjaCIsIm1hcCIsInRvSlMiLCJzb21lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBWUEsYTs7QUFFQSw2QztBQUNBLG9DOzs7Ozs7O0FBT01BLGtCOzs7Ozs7O0FBT0osNEJBQVlDLEtBQVosQ0FBd0I7QUFDdEIsS0FBS0MsUUFBTCxDQUFnQixJQUFoQjtBQUNBLEtBQUtDLFNBQUwsQ0FBaUIscUJBQWpCO0FBQ0EsS0FBS0MsTUFBTCxDQUFjSCxLQUFkO0FBQ0QsQzs7QUFFZTtBQUNkLE1BQU8sTUFBS0csTUFBWjtBQUNELEM7O0FBRWdDO0FBQy9CLE1BQU8sTUFBS0YsUUFBWjtBQUNELEM7O0FBRTBCO0FBQ3pCLE1BQU8sTUFBS0MsU0FBTCxDQUFlRSxJQUF0QjtBQUNELEM7O0FBRVVDLEssQ0FBb0M7QUFDN0MsTUFBT0EsT0FBUSxDQUFDLENBQVQsRUFBY0EsTUFBUSxLQUFLSCxTQUFMLENBQWVFLElBQXJDO0FBQ0wsS0FBS0YsU0FBTCxDQUFlSSxHQUFmLENBQW1CRCxLQUFuQixDQURLO0FBRUwsSUFGRjtBQUdELEM7O0FBRVdFLEssQ0FBaUM7QUFDM0MsR0FBSUEsTUFBTU4sUUFBVixDQUFvQjtBQUNsQk0sTUFBTU4sUUFBTixDQUFlTyxXQUFmLENBQTJCRCxLQUEzQjtBQUNEO0FBQ0RBLE1BQU1OLFFBQU4sQ0FBaUIsSUFBakI7QUFDQSxLQUFLQyxTQUFMLENBQWlCLEtBQUtBLFNBQUwsQ0FBZU8sSUFBZixDQUFvQkYsS0FBcEIsQ0FBakI7QUFDRCxDOztBQUVXQSxLLENBQWlDO0FBQzNDLEdBQUlGLE9BQVEsS0FBS0gsU0FBTCxDQUFlUSxPQUFmLENBQXVCSCxLQUF2QixDQUFaOztBQUVBO0FBQ0VGLE1BQVEsQ0FBQyxDQURYO0FBRUUscURBRkY7OztBQUtBRSxNQUFNTixRQUFOLENBQWlCLElBQWpCOztBQUVBLEtBQUtDLFNBQUwsQ0FBaUIsS0FBS0EsU0FBTCxDQUFlUyxNQUFmLENBQXNCTixLQUF0QixDQUE2QixDQUE3QixDQUFqQjtBQUNELEM7O0FBRU9FLEssQ0FBbUM7QUFDekMsTUFBTyxNQUFLTCxTQUFMLENBQWVRLE9BQWYsQ0FBdUJILEtBQXZCLENBQVA7QUFDRCxDOztBQUVPSyxRLENBQW9CQyxPLENBQW9CO0FBQzlDLEtBQUtYLFNBQUwsQ0FBZVksT0FBZixDQUF1QkYsUUFBdkIsQ0FBaUNDLE9BQWpDO0FBQ0QsQzs7QUFFR0QsUSxDQUFvQkMsTyxDQUF5QztBQUMvRCxNQUFPLE1BQUtYLFNBQUwsQ0FBZWEsR0FBZixDQUFtQkgsUUFBbkIsQ0FBNkJDLE9BQTdCLEVBQXNDRyxJQUF0QyxFQUFQO0FBQ0QsQzs7QUFFSUosUSxDQUFvQkMsTyxDQUF1QjtBQUM5QyxNQUFPLE1BQUtYLFNBQUwsQ0FBZWUsSUFBZixDQUFvQkwsUUFBcEIsQ0FBOEJDLE9BQTlCLENBQVA7QUFDRCxDOzs7O0FBSUhLLE9BQU9DLE9BQVAsQ0FBaUJwQixrQkFBakIiLCJmaWxlIjoiTmF2aWdhdGlvblRyZWVOb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgQWxpYmFiYSBHcm91cCBIb2xkaW5nIExpbWl0ZWQuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3ROYXZpZ2F0aW9uVHJlZU5vZGVcbiAqIEBmbG93XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdmYmpzL2xpYi9pbnZhcmlhbnQnO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5cbi8qKlxuICogVXRpbGl0eSB0byBidWlsZCBhIHRyZWUgb2Ygbm9kZXMuXG4gKiBOb3RlIHRoYXQgdGhpcyB0cmVlIGRvZXMgbm90IHBlcmZvcm0gY3ljbGljIHJlZHVuZGFuY3kgY2hlY2tcbiAqIHdoaWxlIGFwcGVuZGluZyBjaGlsZCBub2RlLlxuICovXG5jbGFzcyBOYXZpZ2F0aW9uVHJlZU5vZGUge1xuICBfX3BhcmVudDogP05hdmlnYXRpb25UcmVlTm9kZTtcblxuICBfY2hpbGRyZW46IExpc3Q8TmF2aWdhdGlvblRyZWVOb2RlPjtcblxuICBfdmFsdWU6IGFueTtcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5fX3BhcmVudCA9IG51bGw7XG4gICAgdGhpcy5fY2hpbGRyZW4gPSBuZXcgTGlzdCgpO1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBnZXRWYWx1ZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIGdldFBhcmVudCgpOiA/TmF2aWdhdGlvblRyZWVOb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fX3BhcmVudDtcbiAgfVxuXG4gIGdldENoaWxkcmVuQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4uc2l6ZTtcbiAgfVxuXG4gIGdldENoaWxkQXQoaW5kZXg6IG51bWJlcik6ID9OYXZpZ2F0aW9uVHJlZU5vZGUge1xuICAgIHJldHVybiBpbmRleCA+IC0xICYmIGluZGV4IDwgdGhpcy5fY2hpbGRyZW4uc2l6ZSA/XG4gICAgICB0aGlzLl9jaGlsZHJlbi5nZXQoaW5kZXgpIDpcbiAgICAgIG51bGw7XG4gIH1cblxuICBhcHBlbmRDaGlsZChjaGlsZDogTmF2aWdhdGlvblRyZWVOb2RlKTogdm9pZCB7XG4gICAgaWYgKGNoaWxkLl9fcGFyZW50KSB7XG4gICAgICBjaGlsZC5fX3BhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgfVxuICAgIGNoaWxkLl9fcGFyZW50ID0gdGhpcztcbiAgICB0aGlzLl9jaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuLnB1c2goY2hpbGQpO1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQ6IE5hdmlnYXRpb25UcmVlTm9kZSk6IHZvaWQge1xuICAgIHZhciBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgaW5kZXggPiAtMSxcbiAgICAgICdUaGUgbm9kZSB0byBiZSByZW1vdmVkIGlzIG5vdCBhIGNoaWxkIG9mIHRoaXMgbm9kZS4nXG4gICAgKTtcblxuICAgIGNoaWxkLl9fcGFyZW50ID0gbnVsbDtcblxuICAgIHRoaXMuX2NoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIGluZGV4T2YoY2hpbGQ6IE5hdmlnYXRpb25UcmVlTm9kZSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICB9XG5cbiAgZm9yRWFjaChjYWxsYmFjazogRnVuY3Rpb24sIGNvbnRleHQ6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX2NoaWxkcmVuLmZvckVhY2goY2FsbGJhY2ssIGNvbnRleHQpO1xuICB9XG5cbiAgbWFwKGNhbGxiYWNrOiBGdW5jdGlvbiwgY29udGV4dDogYW55KTogQXJyYXk8TmF2aWdhdGlvblRyZWVOb2RlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLm1hcChjYWxsYmFjaywgY29udGV4dCkudG9KUygpO1xuICB9XG5cbiAgc29tZShjYWxsYmFjazogRnVuY3Rpb24sIGNvbnRleHQ6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5zb21lKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvblRyZWVOb2RlO1xuIl19