
















'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();

var _invariant=require('fbjs/lib/invariant');var _invariant2=_interopRequireDefault(_invariant);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var

EventHolder=function(){
function EventHolder(){_classCallCheck(this,EventHolder);
this._heldEvents={};
this._currentEventKey=null;
}_createClass(EventHolder,[{key:'holdEvent',value:function holdEvent(






















eventType,a,b,c,d,e,_){
this._heldEvents[eventType]=this._heldEvents[eventType]||[];
var eventsOfType=this._heldEvents[eventType];
var key={
eventType:eventType,
index:eventsOfType.length};

eventsOfType.push([a,b,c,d,e,_]);
return key;
}},{key:'emitToListener',value:function emitToListener(









eventType,listener,context){var _this=this;
var eventsOfType=this._heldEvents[eventType];
if(!eventsOfType){
return;
}
var origEventKey=this._currentEventKey;
eventsOfType.forEach(function(eventHeld,index){
if(!eventHeld){
return;
}
_this._currentEventKey={
eventType:eventType,
index:index};

listener.apply(context,eventHeld);
});
this._currentEventKey=origEventKey;
}},{key:'releaseCurrentEvent',value:function releaseCurrentEvent()









{
(0,_invariant2.default)(
this._currentEventKey!==null,
'Not in an emitting cycle; there is no current event');

this.releaseEvent(this._currentEventKey);
}},{key:'releaseEvent',value:function releaseEvent(







token){
delete this._heldEvents[token.eventType][token.index];
}},{key:'releaseEventType',value:function releaseEventType(






type){
this._heldEvents[type]=[];
}}]);return EventHolder;}();


module.exports=EventHolder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50SG9sZGVyLmpzIl0sIm5hbWVzIjpbIkV2ZW50SG9sZGVyIiwiX2hlbGRFdmVudHMiLCJfY3VycmVudEV2ZW50S2V5IiwiZXZlbnRUeXBlIiwiYSIsImIiLCJjIiwiZCIsImUiLCJfIiwiZXZlbnRzT2ZUeXBlIiwia2V5IiwiaW5kZXgiLCJsZW5ndGgiLCJwdXNoIiwibGlzdGVuZXIiLCJjb250ZXh0Iiwib3JpZ0V2ZW50S2V5IiwiZm9yRWFjaCIsImV2ZW50SGVsZCIsImFwcGx5IiwicmVsZWFzZUV2ZW50IiwidG9rZW4iLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsYTs7QUFFQSw2Qzs7QUFFTUEsVztBQUNKLHNCQUFjO0FBQ1osS0FBS0MsV0FBTCxDQUFtQixFQUFuQjtBQUNBLEtBQUtDLGdCQUFMLENBQXdCLElBQXhCO0FBQ0QsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QlNDLFMsQ0FBbUJDLEMsQ0FBR0MsQyxDQUFHQyxDLENBQUdDLEMsQ0FBR0MsQyxDQUFHQyxDLENBQUc7QUFDN0MsS0FBS1IsV0FBTCxDQUFpQkUsU0FBakIsRUFBOEIsS0FBS0YsV0FBTCxDQUFpQkUsU0FBakIsR0FBK0IsRUFBN0Q7QUFDQSxHQUFJTyxjQUFlLEtBQUtULFdBQUwsQ0FBaUJFLFNBQWpCLENBQW5CO0FBQ0EsR0FBSVEsS0FBTTtBQUNSUixVQUFXQSxTQURIO0FBRVJTLE1BQU9GLGFBQWFHLE1BRlosQ0FBVjs7QUFJQUgsYUFBYUksSUFBYixDQUFrQixDQUFDVixDQUFELENBQUlDLENBQUosQ0FBT0MsQ0FBUCxDQUFVQyxDQUFWLENBQWFDLENBQWIsQ0FBZ0JDLENBQWhCLENBQWxCO0FBQ0EsTUFBT0UsSUFBUDtBQUNELEM7Ozs7Ozs7Ozs7QUFVY1IsUyxDQUFvQlksUSxDQUFVQyxPLENBQWtCO0FBQzdELEdBQUlOLGNBQWUsS0FBS1QsV0FBTCxDQUFpQkUsU0FBakIsQ0FBbkI7QUFDQSxHQUFJLENBQUNPLFlBQUwsQ0FBbUI7QUFDakI7QUFDRDtBQUNELEdBQUlPLGNBQWUsS0FBS2YsZ0JBQXhCO0FBQ0FRLGFBQWFRLE9BQWIsQ0FBcUIsU0FBY0MsU0FBZCxDQUFzQ1AsS0FBdEMsQ0FBZ0Q7QUFDbkUsR0FBSSxDQUFDTyxTQUFMLENBQWdCO0FBQ2Q7QUFDRDtBQUNELE1BQUtqQixnQkFBTCxDQUF3QjtBQUN0QkMsVUFBV0EsU0FEVztBQUV0QlMsTUFBT0EsS0FGZSxDQUF4Qjs7QUFJQUcsU0FBU0ssS0FBVCxDQUFlSixPQUFmLENBQXdCRyxTQUF4QjtBQUNELENBVEQ7QUFVQSxLQUFLakIsZ0JBQUwsQ0FBd0JlLFlBQXhCO0FBQ0QsQzs7Ozs7Ozs7OztBQVVxQjtBQUNwQjtBQUNFLEtBQUtmLGdCQUFMLEdBQTBCLElBRDVCO0FBRUUscURBRkY7O0FBSUEsS0FBS21CLFlBQUwsQ0FBa0IsS0FBS25CLGdCQUF2QjtBQUNELEM7Ozs7Ozs7O0FBUVlvQixLLENBQWU7QUFDMUIsTUFBTyxNQUFLckIsV0FBTCxDQUFpQnFCLE1BQU1uQixTQUF2QixFQUFrQ21CLE1BQU1WLEtBQXhDLENBQVA7QUFDRCxDOzs7Ozs7O0FBT2dCVyxJLENBQWM7QUFDN0IsS0FBS3RCLFdBQUwsQ0FBaUJzQixJQUFqQixFQUF5QixFQUF6QjtBQUNELEM7OztBQUdIQyxPQUFPQyxPQUFQLENBQWlCekIsV0FBakIiLCJmaWxlIjoiRXZlbnRIb2xkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBnZW5lcmF0ZWQgU2lnbmVkU291cmNlPDwwNTkxODM2YzQ0M2M3MzVkMjRlNjE3ODIzMjBkM2QxNj4+XG4gKlxuICogISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVxuICogISEgVGhpcyBmaWxlIGlzIGEgY2hlY2staW4gb2YgYSBzdGF0aWNfdXBzdHJlYW0gcHJvamVjdCEgICAgICAhIVxuICogISEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEgWW91IHNob3VsZCBub3QgbW9kaWZ5IHRoaXMgZmlsZSBkaXJlY3RseS4gSW5zdGVhZDogICAgICAgICAhIVxuICogISEgMSkgVXNlIGBmanMgdXNlLXVwc3RyZWFtYCB0byB0ZW1wb3JhcmlseSByZXBsYWNlIHRoaXMgd2l0aCAhIVxuICogISEgICAgdGhlIGxhdGVzdCB2ZXJzaW9uIGZyb20gdXBzdHJlYW0uICAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEgMikgTWFrZSB5b3VyIGNoYW5nZXMsIHRlc3QgdGhlbSwgZXRjLiAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEgMykgVXNlIGBmanMgcHVzaC11cHN0cmVhbWAgdG8gY29weSB5b3VyIGNoYW5nZXMgYmFjayB0byAgICAhIVxuICogISEgICAgc3RhdGljX3Vwc3RyZWFtLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50SG9sZGVyXG4gKiBAdHlwZWNoZWNrc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnZmJqcy9saWIvaW52YXJpYW50JztcblxuY2xhc3MgRXZlbnRIb2xkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9oZWxkRXZlbnRzID0ge307XG4gICAgdGhpcy5fY3VycmVudEV2ZW50S2V5ID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIb2xkcyBhIGdpdmVuIGV2ZW50IGZvciBwcm9jZXNzaW5nIGxhdGVyLlxuICAgKlxuICAgKiBUT0RPOiBBbm5vdGF0ZSByZXR1cm4gdHlwZSBiZXR0ZXIuIFRoZSBzdHJ1Y3R1cmFsIHR5cGUgb2YgdGhlIHJldHVybiBoZXJlXG4gICAqICAgICAgIGlzIHByZXR0eSBvYnZpb3VzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gaG9sZCBhbmQgbGF0ZXIgZW1pdFxuICAgKiBAcGFyYW0gey4uLip9IEFyYml0cmFyeSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggcmVnaXN0ZXJlZCBsaXN0ZW5lclxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRva2VuIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVsZWFzZSB0aGUgaGVsZCBldmVudFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiAgIGhvbGRlci5ob2xkRXZlbnQoe3NvbWVFdmVudDogJ2FiYyd9KTtcbiAgICpcbiAgICogICBob2xkZXIuZW1pdFRvSGFuZGxlcih7XG4gICAqICAgICBzb21lRXZlbnQ6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgKiAgICAgfVxuICAgKiAgIH0pOyAvL2xvZ3MgJ2FiYydcbiAgICpcbiAgICovXG4gIGhvbGRFdmVudChldmVudFR5cGU6IFN0cmluZywgYSwgYiwgYywgZCwgZSwgXykge1xuICAgIHRoaXMuX2hlbGRFdmVudHNbZXZlbnRUeXBlXSA9IHRoaXMuX2hlbGRFdmVudHNbZXZlbnRUeXBlXSB8fCBbXTtcbiAgICB2YXIgZXZlbnRzT2ZUeXBlID0gdGhpcy5faGVsZEV2ZW50c1tldmVudFR5cGVdO1xuICAgIHZhciBrZXkgPSB7XG4gICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgIGluZGV4OiBldmVudHNPZlR5cGUubGVuZ3RoXG4gICAgfTtcbiAgICBldmVudHNPZlR5cGUucHVzaChbYSwgYiwgYywgZCwgZSwgX10pO1xuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHMgdGhlIGhlbGQgZXZlbnRzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSB0byB0aGUgZ2l2ZW4gbGlzdGVuZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gZXZlbnRUeXBlIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgZXZlbnRzIHRvIHJlcGxheVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciB0byB3aGljaCB0byBkaXNwYXRjaCB0aGUgZXZlbnRcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBjb250ZXh0IC0gT3B0aW9uYWwgY29udGV4dCBvYmplY3QgdG8gdXNlIHdoZW4gaW52b2tpbmdcbiAgICogICB0aGUgbGlzdGVuZXJcbiAgICovXG4gIGVtaXRUb0xpc3RlbmVyKGV2ZW50VHlwZTogP1N0cmluZywgbGlzdGVuZXIsIGNvbnRleHQ6ID9PYmplY3QpIHtcbiAgICB2YXIgZXZlbnRzT2ZUeXBlID0gdGhpcy5faGVsZEV2ZW50c1tldmVudFR5cGVdO1xuICAgIGlmICghZXZlbnRzT2ZUeXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBvcmlnRXZlbnRLZXkgPSB0aGlzLl9jdXJyZW50RXZlbnRLZXk7XG4gICAgZXZlbnRzT2ZUeXBlLmZvckVhY2goKC8qID9hcnJheSAqLyBldmVudEhlbGQsIC8qIG51bWJlciAqLyBpbmRleCkgPT4ge1xuICAgICAgaWYgKCFldmVudEhlbGQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fY3VycmVudEV2ZW50S2V5ID0ge1xuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9O1xuICAgICAgbGlzdGVuZXIuYXBwbHkoY29udGV4dCwgZXZlbnRIZWxkKTtcbiAgICB9KTtcbiAgICB0aGlzLl9jdXJyZW50RXZlbnRLZXkgPSBvcmlnRXZlbnRLZXk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYW4gQVBJIHRoYXQgY2FuIGJlIGNhbGxlZCBkdXJpbmcgYW4gZXZlbnRpbmcgY3ljbGUgdG8gcmVsZWFzZVxuICAgKiB0aGUgbGFzdCBldmVudCB0aGF0IHdhcyBpbnZva2VkLCBzbyB0aGF0IGl0IGlzIG5vIGxvbmdlciBcImhlbGRcIi5cbiAgICpcbiAgICogSWYgaXQgaXMgY2FsbGVkIHdoZW4gbm90IGluc2lkZSBvZiBhbiBlbWl0dGluZyBjeWNsZSBpdCB3aWxsIHRocm93LlxuICAgKlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gV2hlbiBjYWxsZWQgbm90IGR1cmluZyBhbiBldmVudGluZyBjeWNsZVxuICAgKi9cbiAgcmVsZWFzZUN1cnJlbnRFdmVudCgpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLl9jdXJyZW50RXZlbnRLZXkgIT09IG51bGwsXG4gICAgICAnTm90IGluIGFuIGVtaXR0aW5nIGN5Y2xlOyB0aGVyZSBpcyBubyBjdXJyZW50IGV2ZW50J1xuICAgICk7XG4gICAgdGhpcy5yZWxlYXNlRXZlbnQodGhpcy5fY3VycmVudEV2ZW50S2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgZXZlbnQgY29ycmVzcG9uZGluZyB0byB0aGUgaGFuZGxlIHRoYXQgd2FzIHJldHVybmVkIHdoZW4gdGhlXG4gICAqIGV2ZW50IHdhcyBmaXJzdCBoZWxkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdG9rZW4gLSBUaGUgdG9rZW4gcmV0dXJuZWQgZnJvbSBob2xkRXZlbnRcbiAgICovXG4gIHJlbGVhc2VFdmVudCh0b2tlbjogT2JqZWN0KSB7XG4gICAgZGVsZXRlIHRoaXMuX2hlbGRFdmVudHNbdG9rZW4uZXZlbnRUeXBlXVt0b2tlbi5pbmRleF07XG4gIH1cblxuICAvKipcbiAgICogUmVsZWFzZXMgYWxsIGV2ZW50cyBvZiBhIGNlcnRhaW4gdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICovXG4gIHJlbGVhc2VFdmVudFR5cGUodHlwZTogU3RyaW5nKSB7XG4gICAgdGhpcy5faGVsZEV2ZW50c1t0eXBlXSA9IFtdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRIb2xkZXI7XG4iXX0=