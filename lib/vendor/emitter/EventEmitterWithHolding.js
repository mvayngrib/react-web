
















'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var













EventEmitterWithHolding=function(){







function EventEmitterWithHolding(emitter,holder){_classCallCheck(this,EventEmitterWithHolding);
this._emitter=emitter;
this._eventHolder=holder;
this._currentEventToken=null;
this._emittingHeldEvents=false;
}_createClass(EventEmitterWithHolding,[{key:'addListener',value:function addListener(




eventType,listener,context){
return this._emitter.addListener(eventType,listener,context);
}},{key:'once',value:function once(




eventType,listener,context){
return this._emitter.once(eventType,listener,context);
}},{key:'addRetroactiveListener',value:function addRetroactiveListener(






















eventType,listener,context){
var subscription=this._emitter.addListener(eventType,listener,context);

this._emittingHeldEvents=true;
this._eventHolder.emitToListener(eventType,listener,context);
this._emittingHeldEvents=false;

return subscription;
}},{key:'removeAllListeners',value:function removeAllListeners(




eventType){
this._emitter.removeAllListeners(eventType);
}},{key:'removeCurrentListener',value:function removeCurrentListener()




{
this._emitter.removeCurrentListener();
}},{key:'listeners',value:function listeners(




eventType){
return this._emitter.listeners(eventType);
}},{key:'emit',value:function emit(




eventType,a,b,c,d,e,_){
this._emitter.emit(eventType,a,b,c,d,e,_);
}},{key:'emitAndHold',value:function emitAndHold(
















eventType,a,b,c,d,e,_){
this._currentEventToken=this._eventHolder.holdEvent(
eventType,
a,b,c,d,e,_);

this._emitter.emit(eventType,a,b,c,d,e,_);
this._currentEventToken=null;
}},{key:'releaseCurrentEvent',value:function releaseCurrentEvent()




{
if(this._currentEventToken!==null){
this._eventHolder.releaseEvent(this._currentEventToken);
}else if(this._emittingHeldEvents){
this._eventHolder.releaseCurrentEvent();
}
}},{key:'releaseHeldEventType',value:function releaseHeldEventType(





eventType){
this._eventHolder.releaseEventType(eventType);
}}]);return EventEmitterWithHolding;}();


module.exports=EventEmitterWithHolding;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50RW1pdHRlcldpdGhIb2xkaW5nLmpzIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlcldpdGhIb2xkaW5nIiwiZW1pdHRlciIsImhvbGRlciIsIl9lbWl0dGVyIiwiX2V2ZW50SG9sZGVyIiwiX2N1cnJlbnRFdmVudFRva2VuIiwiX2VtaXR0aW5nSGVsZEV2ZW50cyIsImV2ZW50VHlwZSIsImxpc3RlbmVyIiwiY29udGV4dCIsImFkZExpc3RlbmVyIiwib25jZSIsInN1YnNjcmlwdGlvbiIsImVtaXRUb0xpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlQ3VycmVudExpc3RlbmVyIiwibGlzdGVuZXJzIiwiYSIsImIiLCJjIiwiZCIsImUiLCJfIiwiZW1pdCIsImhvbGRFdmVudCIsInJlbGVhc2VFdmVudCIsInJlbGVhc2VDdXJyZW50RXZlbnQiLCJyZWxlYXNlRXZlbnRUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsYTs7Ozs7Ozs7Ozs7Ozs7QUFjTUEsdUI7Ozs7Ozs7O0FBUUosaUNBQVlDLE9BQVosQ0FBcUJDLE1BQXJCLENBQTZCO0FBQzNCLEtBQUtDLFFBQUwsQ0FBZ0JGLE9BQWhCO0FBQ0EsS0FBS0csWUFBTCxDQUFvQkYsTUFBcEI7QUFDQSxLQUFLRyxrQkFBTCxDQUEwQixJQUExQjtBQUNBLEtBQUtDLG1CQUFMLENBQTJCLEtBQTNCO0FBQ0QsQzs7Ozs7QUFLV0MsUyxDQUFtQkMsUSxDQUFVQyxPLENBQWtCO0FBQ3pELE1BQU8sTUFBS04sUUFBTCxDQUFjTyxXQUFkLENBQTBCSCxTQUExQixDQUFxQ0MsUUFBckMsQ0FBK0NDLE9BQS9DLENBQVA7QUFDRCxDOzs7OztBQUtJRixTLENBQW1CQyxRLENBQVVDLE8sQ0FBa0I7QUFDbEQsTUFBTyxNQUFLTixRQUFMLENBQWNRLElBQWQsQ0FBbUJKLFNBQW5CLENBQThCQyxRQUE5QixDQUF3Q0MsT0FBeEMsQ0FBUDtBQUNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJDRixTLENBQW1CQyxRLENBQVVDLE8sQ0FBdUM7QUFDcEUsR0FBSUcsY0FBZSxLQUFLVCxRQUFMLENBQWNPLFdBQWQsQ0FBMEJILFNBQTFCLENBQXFDQyxRQUFyQyxDQUErQ0MsT0FBL0MsQ0FBbkI7O0FBRUEsS0FBS0gsbUJBQUwsQ0FBMkIsSUFBM0I7QUFDQSxLQUFLRixZQUFMLENBQWtCUyxjQUFsQixDQUFpQ04sU0FBakMsQ0FBNENDLFFBQTVDLENBQXNEQyxPQUF0RDtBQUNBLEtBQUtILG1CQUFMLENBQTJCLEtBQTNCOztBQUVBLE1BQU9NLGFBQVA7QUFDRCxDOzs7OztBQUtrQkwsUyxDQUFtQjtBQUNwQyxLQUFLSixRQUFMLENBQWNXLGtCQUFkLENBQWlDUCxTQUFqQztBQUNELEM7Ozs7O0FBS3VCO0FBQ3RCLEtBQUtKLFFBQUwsQ0FBY1kscUJBQWQ7QUFDRCxDOzs7OztBQUtTUixTLENBQXlEO0FBQ2pFLE1BQU8sTUFBS0osUUFBTCxDQUFjYSxTQUFkLENBQXdCVCxTQUF4QixDQUFQO0FBQ0QsQzs7Ozs7QUFLSUEsUyxDQUFtQlUsQyxDQUFHQyxDLENBQUdDLEMsQ0FBR0MsQyxDQUFHQyxDLENBQUdDLEMsQ0FBRztBQUN4QyxLQUFLbkIsUUFBTCxDQUFjb0IsSUFBZCxDQUFtQmhCLFNBQW5CLENBQThCVSxDQUE5QixDQUFpQ0MsQ0FBakMsQ0FBb0NDLENBQXBDLENBQXVDQyxDQUF2QyxDQUEwQ0MsQ0FBMUMsQ0FBNkNDLENBQTdDO0FBQ0QsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQldmLFMsQ0FBbUJVLEMsQ0FBR0MsQyxDQUFHQyxDLENBQUdDLEMsQ0FBR0MsQyxDQUFHQyxDLENBQUc7QUFDL0MsS0FBS2pCLGtCQUFMLENBQTBCLEtBQUtELFlBQUwsQ0FBa0JvQixTQUFsQjtBQUN4QmpCLFNBRHdCO0FBRXhCVSxDQUZ3QixDQUVyQkMsQ0FGcUIsQ0FFbEJDLENBRmtCLENBRWZDLENBRmUsQ0FFWkMsQ0FGWSxDQUVUQyxDQUZTLENBQTFCOztBQUlBLEtBQUtuQixRQUFMLENBQWNvQixJQUFkLENBQW1CaEIsU0FBbkIsQ0FBOEJVLENBQTlCLENBQWlDQyxDQUFqQyxDQUFvQ0MsQ0FBcEMsQ0FBdUNDLENBQXZDLENBQTBDQyxDQUExQyxDQUE2Q0MsQ0FBN0M7QUFDQSxLQUFLakIsa0JBQUwsQ0FBMEIsSUFBMUI7QUFDRCxDOzs7OztBQUtxQjtBQUNwQixHQUFJLEtBQUtBLGtCQUFMLEdBQTRCLElBQWhDLENBQXNDO0FBQ3BDLEtBQUtELFlBQUwsQ0FBa0JxQixZQUFsQixDQUErQixLQUFLcEIsa0JBQXBDO0FBQ0QsQ0FGRCxJQUVPLElBQUksS0FBS0MsbUJBQVQsQ0FBOEI7QUFDbkMsS0FBS0YsWUFBTCxDQUFrQnNCLG1CQUFsQjtBQUNEO0FBQ0YsQzs7Ozs7O0FBTW9CbkIsUyxDQUFtQjtBQUN0QyxLQUFLSCxZQUFMLENBQWtCdUIsZ0JBQWxCLENBQW1DcEIsU0FBbkM7QUFDRCxDOzs7QUFHSHFCLE9BQU9DLE9BQVAsQ0FBaUI3Qix1QkFBakIiLCJmaWxlIjoiRXZlbnRFbWl0dGVyV2l0aEhvbGRpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBnZW5lcmF0ZWQgU2lnbmVkU291cmNlPDxmYjJiYjVjMWM0MDJhMDk3YTdlMWRhNzQxMzUyNjYyOT4+XG4gKlxuICogISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVxuICogISEgVGhpcyBmaWxlIGlzIGEgY2hlY2staW4gb2YgYSBzdGF0aWNfdXBzdHJlYW0gcHJvamVjdCEgICAgICAhIVxuICogISEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEgWW91IHNob3VsZCBub3QgbW9kaWZ5IHRoaXMgZmlsZSBkaXJlY3RseS4gSW5zdGVhZDogICAgICAgICAhIVxuICogISEgMSkgVXNlIGBmanMgdXNlLXVwc3RyZWFtYCB0byB0ZW1wb3JhcmlseSByZXBsYWNlIHRoaXMgd2l0aCAhIVxuICogISEgICAgdGhlIGxhdGVzdCB2ZXJzaW9uIGZyb20gdXBzdHJlYW0uICAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEgMikgTWFrZSB5b3VyIGNoYW5nZXMsIHRlc3QgdGhlbSwgZXRjLiAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEgMykgVXNlIGBmanMgcHVzaC11cHN0cmVhbWAgdG8gY29weSB5b3VyIGNoYW5nZXMgYmFjayB0byAgICAhIVxuICogISEgICAgc3RhdGljX3Vwc3RyZWFtLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhIVxuICogISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudEVtaXR0ZXJXaXRoSG9sZGluZ1xuICogQHR5cGVjaGVja3NcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBjbGFzcyBFdmVudEVtaXR0ZXJXaXRoSG9sZGluZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBBbiBFdmVudEVtaXR0ZXJXaXRoSG9sZGluZyBkZWNvcmF0ZXMgYW4gZXZlbnQgZW1pdHRlciBhbmQgZW5hYmxlcyBvbmUgdG9cbiAqIFwiaG9sZFwiIG9yIGNhY2hlIGV2ZW50cyBhbmQgdGhlbiBoYXZlIGEgaGFuZGxlciByZWdpc3RlciBsYXRlciB0byBhY3R1YWxseVxuICogaGFuZGxlIHRoZW0uXG4gKlxuICogVGhpcyBpcyBzZXBhcmF0ZWQgaW50byBpdHMgb3duIGRlY29yYXRvciBzbyB0aGF0IG9ubHkgdGhvc2Ugd2hvIHdhbnQgdG8gdXNlXG4gKiB0aGUgaG9sZGluZyBmdW5jdGlvbmFsaXR5IGhhdmUgdG8gYW5kIG90aGVycyBjYW4ganVzdCB1c2UgYW4gZW1pdHRlci4gU2luY2VcbiAqIGl0IGltcGxlbWVudHMgdGhlIGVtaXR0ZXIgaW50ZXJmYWNlIGl0IGNhbiBhbHNvIGJlIGNvbWJpbmVkIHdpdGggYW55dGhpbmdcbiAqIHRoYXQgdXNlcyBhbiBlbWl0dGVyLlxuICovXG5jbGFzcyBFdmVudEVtaXR0ZXJXaXRoSG9sZGluZyB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtvYmplY3R9IGVtaXR0ZXIgLSBUaGUgb2JqZWN0IHJlc3BvbnNpYmxlIGZvciBlbWl0dGluZyB0aGUgYWN0dWFsXG4gICAqICAgZXZlbnRzLlxuICAgKiBAcGFyYW0ge29iamVjdH0gaG9sZGVyIC0gVGhlIGV2ZW50IGhvbGRlciB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBob2xkaW5nXG4gICAqICAgYW5kIHRoZW4gZW1pdHRpbmcgaGVsZCBldmVudHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbWl0dGVyLCBob2xkZXIpIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gZW1pdHRlcjtcbiAgICB0aGlzLl9ldmVudEhvbGRlciA9IGhvbGRlcjtcbiAgICB0aGlzLl9jdXJyZW50RXZlbnRUb2tlbiA9IG51bGw7XG4gICAgdGhpcy5fZW1pdHRpbmdIZWxkRXZlbnRzID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHNlZSBFdmVudEVtaXR0ZXIjYWRkTGlzdGVuZXJcbiAgICovXG4gIGFkZExpc3RlbmVyKGV2ZW50VHlwZTogU3RyaW5nLCBsaXN0ZW5lciwgY29udGV4dDogP09iamVjdCkge1xuICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmFkZExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgRXZlbnRFbWl0dGVyI29uY2VcbiAgICovXG4gIG9uY2UoZXZlbnRUeXBlOiBTdHJpbmcsIGxpc3RlbmVyLCBjb250ZXh0OiA/T2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2VtaXR0ZXIub25jZShldmVudFR5cGUsIGxpc3RlbmVyLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbGlzdGVuZXIgdG8gYmUgaW52b2tlZCB3aGVuIGV2ZW50cyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgYXJlXG4gICAqIGVtaXR0ZWQuIEFuIG9wdGlvbmFsIGNhbGxpbmcgY29udGV4dCBtYXkgYmUgcHJvdmlkZWQuIFRoZSBkYXRhIGFyZ3VtZW50c1xuICAgKiBlbWl0dGVkIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBsaXN0ZW5lciBmdW5jdGlvbi4gSW4gYWRkaXRpb24gdG8gc3Vic2NyaWJpbmdcbiAgICogdG8gYWxsIHN1YnNlcXVlbnQgZXZlbnRzLCB0aGlzIG1ldGhvZCB3aWxsIGFsc28gaGFuZGxlIGFueSBldmVudHMgdGhhdCBoYXZlXG4gICAqIGFscmVhZHkgYmVlbiBlbWl0dGVkLCBoZWxkLCBhbmQgbm90IHJlbGVhc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gRnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIHNwZWNpZmllZCBldmVudCBpc1xuICAgKiAgIGVtaXR0ZWRcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0IC0gT3B0aW9uYWwgY29udGV4dCBvYmplY3QgdG8gdXNlIHdoZW4gaW52b2tpbmcgdGhlXG4gICAqICAgbGlzdGVuZXJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBlbWl0dGVyLmVtaXRBbmRIb2xkKCdzb21lRXZlbnQnLCAnYWJjJyk7XG4gICAqXG4gICAqICAgZW1pdHRlci5hZGRSZXRyb2FjdGl2ZUxpc3RlbmVyKCdzb21lRXZlbnQnLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAqICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICogICB9KTsgLy8gbG9ncyAnYWJjJ1xuICAgKi9cbiAgYWRkUmV0cm9hY3RpdmVMaXN0ZW5lcihcbiAgICBldmVudFR5cGU6IFN0cmluZywgbGlzdGVuZXIsIGNvbnRleHQ6ID9PYmplY3QpOiBFbWl0dGVyU3Vic2NyaXB0aW9uIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fZW1pdHRlci5hZGRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBjb250ZXh0KTtcblxuICAgIHRoaXMuX2VtaXR0aW5nSGVsZEV2ZW50cyA9IHRydWU7XG4gICAgdGhpcy5fZXZlbnRIb2xkZXIuZW1pdFRvTGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgY29udGV4dCk7XG4gICAgdGhpcy5fZW1pdHRpbmdIZWxkRXZlbnRzID0gZmFsc2U7XG5cbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgRXZlbnRFbWl0dGVyI3JlbW92ZUFsbExpc3RlbmVyc1xuICAgKi9cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50VHlwZTogU3RyaW5nKSB7XG4gICAgdGhpcy5fZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnRUeXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIEV2ZW50RW1pdHRlciNyZW1vdmVDdXJyZW50TGlzdGVuZXJcbiAgICovXG4gIHJlbW92ZUN1cnJlbnRMaXN0ZW5lcigpIHtcbiAgICB0aGlzLl9lbWl0dGVyLnJlbW92ZUN1cnJlbnRMaXN0ZW5lcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgRXZlbnRFbWl0dGVyI2xpc3RlbmVyc1xuICAgKi9cbiAgbGlzdGVuZXJzKGV2ZW50VHlwZTogU3RyaW5nKSAvKiBUT0RPOiBBbm5vdGF0ZSByZXR1cm4gdHlwZSBoZXJlICovIHtcbiAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5saXN0ZW5lcnMoZXZlbnRUeXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIEV2ZW50RW1pdHRlciNlbWl0XG4gICAqL1xuICBlbWl0KGV2ZW50VHlwZTogU3RyaW5nLCBhLCBiLCBjLCBkLCBlLCBfKSB7XG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KGV2ZW50VHlwZSwgYSwgYiwgYywgZCwgZSwgXyk7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHMgYW4gZXZlbnQgb2YgdGhlIGdpdmVuIHR5cGUgd2l0aCB0aGUgZ2l2ZW4gZGF0YSwgYW5kIGhvbGRzIHRoYXQgZXZlbnRcbiAgICogaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBkaXNwYXRjaCBpdCB0byBhIGxhdGVyIHN1YnNjcmliZXIgd2hlbiB0aGV5IHNheSB0aGV5XG4gICAqIHdhbnQgdG8gaGFuZGxlIGhlbGQgZXZlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdFxuICAgKiBAcGFyYW0gey4uLip9IEFyYml0cmFyeSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggcmVnaXN0ZXJlZCBsaXN0ZW5lclxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGVtaXR0ZXIuZW1pdEFuZEhvbGQoJ3NvbWVFdmVudCcsICdhYmMnKTtcbiAgICpcbiAgICogICBlbWl0dGVyLmFkZFJldHJvYWN0aXZlTGlzdGVuZXIoJ3NvbWVFdmVudCcsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgKiAgIH0pOyAvLyBsb2dzICdhYmMnXG4gICAqL1xuICBlbWl0QW5kSG9sZChldmVudFR5cGU6IFN0cmluZywgYSwgYiwgYywgZCwgZSwgXykge1xuICAgIHRoaXMuX2N1cnJlbnRFdmVudFRva2VuID0gdGhpcy5fZXZlbnRIb2xkZXIuaG9sZEV2ZW50KFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgYSwgYiwgYywgZCwgZSwgX1xuICAgICk7XG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KGV2ZW50VHlwZSwgYSwgYiwgYywgZCwgZSwgXyk7XG4gICAgdGhpcy5fY3VycmVudEV2ZW50VG9rZW4gPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgRXZlbnRIb2xkZXIjcmVsZWFzZUN1cnJlbnRFdmVudFxuICAgKi9cbiAgcmVsZWFzZUN1cnJlbnRFdmVudCgpIHtcbiAgICBpZiAodGhpcy5fY3VycmVudEV2ZW50VG9rZW4gIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2V2ZW50SG9sZGVyLnJlbGVhc2VFdmVudCh0aGlzLl9jdXJyZW50RXZlbnRUb2tlbik7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9lbWl0dGluZ0hlbGRFdmVudHMpIHtcbiAgICAgIHRoaXMuX2V2ZW50SG9sZGVyLnJlbGVhc2VDdXJyZW50RXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHNlZSBFdmVudEhvbGRlciNyZWxlYXNlRXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICovXG4gIHJlbGVhc2VIZWxkRXZlbnRUeXBlKGV2ZW50VHlwZTogU3RyaW5nKSB7XG4gICAgdGhpcy5fZXZlbnRIb2xkZXIucmVsZWFzZUV2ZW50VHlwZShldmVudFR5cGUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyV2l0aEhvbGRpbmc7XG4iXX0=